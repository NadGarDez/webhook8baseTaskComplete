/// <reference types="node" />
import 'isomorphic-fetch';
import { Context } from './context';
import { Readable } from 'stream';
declare type workspace = {
    name: string;
    id: string;
};
export declare namespace Utils {
    const undefault: (m: any) => any;
    const safeExecution: (cmd: any) => {
        result: any;
        error: Error;
    };
    const installFiles: (targetDirectory: string, files: Map<string, string>, fs: any, context: Context) => string;
    const upload: (url: string, fileStream: Readable, context: Context) => Promise<void>;
    const archiveToMemory: (directories: {
        source: string;
        dist?: string;
    }[], context: Context) => Promise<Readable>;
    const promptWorkspace: (workspaces: workspace[], context: Context) => Promise<{
        id: string;
    }>;
    const sleep: (ms: number) => Promise<void>;
    const trimLastSlash: (url: string) => string;
    const commandDirMiddleware: (commandsDirPath: string) => (commandObject: {
        [key: string]: any;
    }, pathName: string) => Object;
}
export {};
//# sourceMappingURL=utils.d.ts.map