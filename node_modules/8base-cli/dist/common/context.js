"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const fs = require("fs");
const Ora = require("ora");
const path = require("path");
const winston = require("winston");
const yaml = require("yaml");
const chalk_1 = require("chalk");
const api_client_1 = require("@8base/api-client");
const userDataStorage_1 = require("./userDataStorage");
const user_1 = require("./user");
const config_1 = require("../config");
const projectController_1 = require("../engine/controllers/projectController");
const StorageParameters_1 = require("../consts/StorageParameters");
const Colors_1 = require("../consts/Colors");
const GraphqlActions_1 = require("../consts/GraphqlActions");
const Environment_1 = require("../consts/Environment");
const pkg = require('../../package.json');
const WORKSPACE_CONFIG_FILENAME = '.workspace.json';
const PROJECT_CONFIG_FILENAME = '8base.yml';
class Context {
    constructor(params, translations) {
        this._project = null;
        this.logger = winston.createLogger({
            level: params.d ? 'debug' : 'info',
            format: winston.format.printf((info) => {
                if (info.level === 'info') {
                    return info.message;
                }
                if (info.level === 'debug') {
                    return `${chalk_1.default.hex(Colors_1.Colors.blue)(info.level)} [${Date.now()}]: ${info.message}`;
                }
                return `${chalk_1.default.hex(Colors_1.Colors.red)(info.level)}: ${info.message}`;
            }),
            transports: [new winston.transports.Console()],
        });
        this.i18n = translations.i18n;
        this.version = pkg.version;
        this.spinner = Ora({
            color: 'white',
            text: '\n',
        });
    }
    get workspaceConfig() {
        const workspaceConfigPath = this.getWorkspaceConfigPath();
        if (this.hasWorkspaceConfig()) {
            return JSON.parse(String(fs.readFileSync(workspaceConfigPath)));
        }
        return null;
    }
    getEnvironments() {
        return __awaiter(this, void 0, void 0, function* () {
            const { system } = yield this.request(GraphqlActions_1.GraphqlActions.environmentsList, null, {
                customEnvironment: Environment_1.DEFAULT_ENVIRONMENT_NAME,
            });
            const environments = system.environments.items;
            if (_.isEmpty(environments)) {
                throw new Error(this.i18n.t('logout_error'));
            }
            return environments;
        });
    }
    set workspaceConfig(value) {
        const workspaceConfigPath = this.getWorkspaceConfigPath();
        fs.writeFileSync(workspaceConfigPath, JSON.stringify(value, null, 2));
    }
    getWorkspaceConfigPath(customPath) {
        return path.join(customPath || process.cwd(), WORKSPACE_CONFIG_FILENAME);
    }
    updateWorkspace(value) {
        const currentWorkspaceConfig = this.workspaceConfig;
        this.workspaceConfig = _.merge(currentWorkspaceConfig, value);
    }
    updateEnvironmentName(environmentName) {
        const currentWorkspaceConfig = this.workspaceConfig;
        this.workspaceConfig = _.merge(currentWorkspaceConfig, { environmentName });
    }
    createWorkspaceConfig(value, customPath) {
        const workspaceConfigPath = this.getWorkspaceConfigPath(customPath);
        fs.writeFileSync(workspaceConfigPath, JSON.stringify(value, null, 2));
    }
    get workspaceId() {
        return _.get(this.workspaceConfig, 'workspaceId', null);
    }
    get region() {
        return _.get(this.workspaceConfig, 'region', null);
    }
    get environmentName() {
        return _.get(this.workspaceConfig, 'environmentName', null);
    }
    get apiHost() {
        return _.get(this.workspaceConfig, 'apiHost', null);
    }
    hasWorkspaceConfig(customPath) {
        const workspaceConfigPath = this.getWorkspaceConfigPath(customPath);
        return fs.existsSync(workspaceConfigPath);
    }
    isProjectDir() {
        return this.hasWorkspaceConfig();
    }
    get projectConfig() {
        const projectConfigPath = this.getProjectConfigPath();
        let projectConfig = { functions: {} };
        if (this.hasProjectConfig()) {
            projectConfig = yaml.parse(String(fs.readFileSync(projectConfigPath))) || projectConfig;
        }
        return projectConfig;
    }
    set projectConfig(value) {
        const projectConfigPath = this.getProjectConfigPath();
        fs.writeFileSync(projectConfigPath, yaml.stringify(value));
    }
    getProjectConfigPath(customPath) {
        return path.join(customPath || process.cwd(), PROJECT_CONFIG_FILENAME);
    }
    hasProjectConfig(customPath) {
        const projectConfigPath = this.getProjectConfigPath(customPath);
        return fs.existsSync(projectConfigPath);
    }
    resolveMainServerAddress() {
        return this.storage.getValue(StorageParameters_1.StorageParameters.serverAddress) || Environment_1.DEFAULT_REMOTE_ADDRESS;
    }
    get storage() {
        return userDataStorage_1.UserDataStorage;
    }
    get user() {
        return user_1.User;
    }
    get config() {
        return config_1.StaticConfig;
    }
    setSessionInfo(data) {
        if (!data) {
            this.logger.debug('set session info empty data');
            return;
        }
        this.logger.debug('set session info...');
        if (_.isString(data.idToken)) {
            this.logger.debug(`id token ${data.idToken.substr(0, 10)}`);
        }
        if (_.isString(data.refreshToken)) {
            this.logger.debug(`refresh token: ${data.refreshToken.substr(0, 10)}`);
        }
        this.storage.setValues([
            {
                name: StorageParameters_1.StorageParameters.refreshToken,
                value: data.refreshToken,
            },
            {
                name: StorageParameters_1.StorageParameters.idToken,
                value: data.idToken,
            },
        ]);
    }
    getWorkspaces() {
        return __awaiter(this, void 0, void 0, function* () {
            const workspaces = yield this.workspaceList();
            if (_.isEmpty(workspaces) || !_.isArray(workspaces)) {
                throw new Error(this.i18n.t('logout_error'));
            }
            return workspaces;
        });
    }
    checkWorkspace(workspaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!_.some(yield this.workspaceList(), { id: workspaceId })) {
                throw new Error(this.i18n.t('inexistent_workspace'));
            }
        });
    }
    workspaceList() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.request(GraphqlActions_1.GraphqlActions.listWorkspaces, null, {
                isLoginRequired: false,
                address: this.resolveMainServerAddress(),
                // custom workspace id is "" to ignore this parameter during requesting
                customWorkspaceId: '',
            });
            return _.get(data, ['workspacesList', 'items'], []);
        });
    }
    request(query, variables = null, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultOptions = {
                isLoginRequired: true,
                customWorkspaceId: undefined,
                customEnvironment: undefined,
                address: this.apiHost || this.resolveMainServerAddress(),
            };
            const { customEnvironment, customWorkspaceId, isLoginRequired, address } = options
                ? Object.assign({}, defaultOptions, options) : defaultOptions;
            this.logger.debug(this.i18n.t('debug:remote_address', { remoteAddress: address }));
            if (!address) {
                /*
                  address has to be passed as parameter (workspace list query) or resolved from workspace info
                  another way it's invalid behaviour
                 */
                throw new Error(this.i18n.t('configure_error'));
            }
            const client = new api_client_1.Client(address);
            this.logger.debug(`query: ${query}`);
            this.logger.debug(`variables: ${JSON.stringify(variables)}`);
            const refreshToken = this.storage.getValue(StorageParameters_1.StorageParameters.refreshToken);
            if (refreshToken) {
                this.logger.debug(this.i18n.t('debug:set refresh token'));
                client.setRefreshToken(refreshToken);
            }
            const idToken = this.storage.getValue(StorageParameters_1.StorageParameters.idToken);
            if (idToken) {
                this.logger.debug(this.i18n.t('debug:set_id_token'));
                client.setIdToken(idToken);
            }
            const workspaceId = customWorkspaceId !== undefined ? customWorkspaceId : this.workspaceId;
            if (workspaceId) {
                this.logger.debug(this.i18n.t('debug:set_workspace_id', { workspaceId }));
                client.setWorkspaceId(workspaceId);
            }
            const environmentName = _.isNil(customEnvironment) ? this.environmentName : customEnvironment;
            if (environmentName) {
                this.logger.debug(this.i18n.t('debug:set_environment_name', { environmentName }));
                client.gqlc.setHeader('environment', environmentName);
            }
            if (isLoginRequired && !this.user.isAuthorized()) {
                throw new Error(this.i18n.t('logout_error'));
            }
            this.logger.debug(this.i18n.t('debug:start_request'));
            const result = yield client.request(query, variables);
            this.logger.debug(this.i18n.t('debug:request_complete'));
            if (client.idToken !== idToken) {
                this.logger.debug(this.i18n.t('debug:reset_id_token'));
                this.storage.setValues([
                    {
                        name: StorageParameters_1.StorageParameters.idToken,
                        value: client.idToken,
                    },
                ]);
            }
            if (client.refreshToken !== refreshToken) {
                this.logger.debug(this.i18n.t('debug:reset_refresh_token'));
                this.storage.setValues([
                    {
                        name: StorageParameters_1.StorageParameters.refreshToken,
                        value: client.refreshToken,
                    },
                ]);
            }
            return result;
        });
    }
    initializeProject() {
        this.project;
    }
    get project() {
        if (_.isNil(this._project)) {
            this._project = projectController_1.ProjectController.initialize(this);
        }
        return this._project;
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map