import * as i18next from 'i18next';
import * as winston from 'winston';
import { UserDataStorage } from './userDataStorage';
import { User } from './user';
import { StaticConfig } from '../config';
import { ProjectDefinition } from '../interfaces/Project';
import { Translations } from './translations';
import { EnvironmentInfo, RequestOptions, SessionInfo, Workspace } from '../interfaces/Common';
export declare type WorkspaceConfig = {
    readonly workspaceId: string;
    readonly environmentName: string;
    readonly apiHost: string;
};
declare type Plugin = {
    name: string;
    path: string;
};
export declare type ProjectConfig = {
    functions: Object;
    plugins?: Plugin[];
};
export declare class Context {
    private _project;
    version: string;
    logger: winston.Logger;
    i18n: i18next.i18n;
    spinner: any;
    constructor(params: any, translations: Translations);
    workspaceConfig: WorkspaceConfig | null;
    getEnvironments(): Promise<EnvironmentInfo[]>;
    getWorkspaceConfigPath(customPath?: string): string;
    updateWorkspace(value: WorkspaceConfig): void;
    updateEnvironmentName(environmentName: string): void;
    createWorkspaceConfig(value: WorkspaceConfig, customPath?: string): void;
    readonly workspaceId: string | null;
    readonly region: string | null;
    readonly environmentName: string | null;
    readonly apiHost: string | null;
    hasWorkspaceConfig(customPath?: string): boolean;
    isProjectDir(): boolean;
    projectConfig: ProjectConfig;
    getProjectConfigPath(customPath?: string): string;
    hasProjectConfig(customPath?: string): boolean;
    resolveMainServerAddress(): string;
    readonly storage: typeof UserDataStorage;
    readonly user: typeof User;
    readonly config: typeof StaticConfig;
    setSessionInfo(data: SessionInfo): void;
    getWorkspaces(): Promise<Workspace[]>;
    checkWorkspace(workspaceId: string): Promise<void>;
    private workspaceList;
    request(query: string, variables?: any, options?: RequestOptions): Promise<any>;
    initializeProject(): void;
    readonly project: ProjectDefinition;
}
export {};
//# sourceMappingURL=context.d.ts.map