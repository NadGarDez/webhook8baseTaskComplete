"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const mkdirp = require("mkdirp");
const asyncForEach = (array, callback) => __awaiter(this, void 0, void 0, function* () {
    for (let index = 0; index < array.length; index++) {
        yield callback(array[index], index, array);
    }
});
const writeFile = (relativePath, data, options) => __awaiter(this, void 0, void 0, function* () {
    yield mkdirp.sync(path.dirname(relativePath));
    yield fs.writeFile(relativePath, data, options);
});
exports.writeFs = (fsObject, rootPath = './', options = {}) => __awaiter(this, void 0, void 0, function* () {
    yield asyncForEach(Object.keys(fsObject), (relativePath) => __awaiter(this, void 0, void 0, function* () {
        const fileContent = fsObject[relativePath];
        yield writeFile(path.join(rootPath, relativePath), fileContent, Object.assign({ encoding: 'utf8' }, options));
    }));
});
exports.readFs = (filePaths, rootPath = './') => __awaiter(this, void 0, void 0, function* () {
    let fsObject = {};
    yield asyncForEach(filePaths, (relativePath) => __awaiter(this, void 0, void 0, function* () {
        const fileContent = yield fs.readFile(path.join(rootPath, relativePath), 'utf8');
        fsObject[relativePath] = fileContent;
    }));
    return fsObject;
});
//# sourceMappingURL=memfs.js.map