#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const latest_version_1 = require("latest-version");
const chalk_1 = require("chalk");
const config_1 = require("./config");
const utils_1 = require("./common/utils");
const translations_1 = require("./common/translations");
const pkg = require('../package.json');
const start = (translations) => {
    const argv = yargs
        .scriptName('8base')
        .usage(translations.i18n.t('8base_usage'))
        .commandDir(config_1.StaticConfig.commandsDir, {
        extensions: ['js'],
        recurse: true,
        visit: utils_1.Utils.commandDirMiddleware(config_1.StaticConfig.commandsDir),
    })
        .alias('version', 'v')
        .option('v', {
        global: false,
    })
        .option('debug', {
        alias: 'd',
        describe: 'Turn on debug logs',
        type: 'boolean',
    })
        .recommendCommands()
        .strict()
        .fail((msg, err) => {
        // certain yargs validations throw strings :P
        const actual = err || new Error(msg);
        // ValidationErrors are already logged, as are package errors
        if (actual.name !== 'ValidationError') {
            if (/Did you mean/.test(actual.message)) {
                console.error('Unknown command');
            }
            console.error(actual.message);
        }
        process.exit(0);
    })
        .detectLocale(false)
        .help()
        .alias('help', 'h')
        .updateStrings({
        'Examples:': 'EXAMPLES',
        'Commands:': 'COMMANDS',
        'Options:': 'OPTIONS',
    })
        .wrap(yargs.terminalWidth()).argv;
    if (!argv._[0]) {
        yargs.showHelp();
    }
};
translations_1.translations
    .init()
    .then((translations) => __awaiter(this, void 0, void 0, function* () {
    try {
        const last = yield latest_version_1.default(pkg.name);
        if (pkg.version !== last && process.env.SKIP_VERSION_CHECK !== 'true') {
            // eslint-disable-next-line no-console
            console.log(chalk_1.default.yellow(translations.i18n.t('8base_new_version', { last })));
        }
    }
    catch (e) { }
    start(translations);
}))
    .catch(err => console.error(err.message));
//# sourceMappingURL=index.js.map