import { ExtensionsContainer, ExtensionType, SyntaxType } from '../../interfaces/Extensions';
import { ProjectDefinition } from '../../interfaces/Project';
import { Context } from '../../common/context';
declare type FunctionDeclarationOptions = {
    operation?: string;
    method?: string;
    path?: string;
    type?: string;
    schedule?: string;
};
declare type FunctionGeneratationOptions = {
    type: ExtensionType;
    name: string;
    mocks: boolean;
    syntax: SyntaxType;
    projectPath?: string;
    silent?: boolean;
    extendType?: string;
};
declare type MockGeneratationOptions = {
    name: string;
    functionName: string;
    projectPath?: string;
    silent?: boolean;
};
declare type PluginGenerationOptions = {
    name: string;
    syntax?: SyntaxType;
    projectPath?: string;
    silent?: boolean;
};
export declare class ProjectController {
    /**
     * public functions
     */
    static initialize(context: Context): ProjectDefinition;
    static getFunctionSourceCode(context: Context): string[];
    static saveSchema(project: ProjectDefinition, outDir: string): void;
    static saveProject(project: ProjectDefinition, outDir: string): void;
    static saveMetaDataFile(project: ProjectDefinition, outDir: string): void;
    static getSchemaPaths(extensions: ExtensionsContainer): string[];
    /**
     * private functions
     */
    private static loadConfigFile;
    private static saveConfigFile;
    private static loadExtensions;
    static addPluginDeclaration(context: Context, name: string, declaration: Object, projectPath?: string, silent?: boolean): void;
    static addFunctionDeclaration(context: Context, name: string, declaration: Object, projectPath?: string, silent?: boolean): void;
    static generateFunction(context: Context, { type, name, mocks, syntax, extendType, projectPath, silent }: FunctionGeneratationOptions, options?: FunctionDeclarationOptions): void;
    static generatePlugin(context: Context, { name, syntax, silent, projectPath }: PluginGenerationOptions): void;
    static getMock(context: Context, functionName: string, mockName: string): string;
    static generateMock(context: Context, { name, functionName, projectPath, silent }: MockGeneratationOptions): void;
}
export {};
//# sourceMappingURL=projectController.d.ts.map