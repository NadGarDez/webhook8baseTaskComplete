"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const interactive_1 = require("../../../../common/interactive");
const translations_1 = require("../../../../common/translations");
const configuraion_1 = require("../../../../common/configuraion");
exports.default = {
    command: 'set',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        let { environmentName } = params;
        configuraion_1.ProjectConfigurationState.expectConfigured(context);
        if (!environmentName) {
            const environments = yield context.getEnvironments();
            ({ environmentName } = yield interactive_1.Interactive.ask({
                name: 'environmentName',
                type: 'select',
                message: translations_1.translations.i18n.t('environment_set_select_environment'),
                choices: environments.map(e => ({ title: e.name, value: e.name })),
            }));
            if (!environmentName) {
                throw new Error(translations_1.translations.i18n.t('environment_set_prevent_select_environment'));
            }
            const environment = environments.find(env => env.name === environmentName);
            if (!environment) {
                throw new Error(translations_1.translations.i18n.t('environment_set_doesnt_exit'));
            }
        }
        context.updateEnvironmentName(environmentName);
    }),
    describe: translations_1.translations.i18n.t('environment_set_describe'),
    builder: (args) => args.usage(translations_1.translations.i18n.t('environment_set_usage')).option('environmentName', {
        alias: 'n',
        describe: translations_1.translations.i18n.t('environment_set_environment_name_describe'),
        type: 'string',
    }),
};
//# sourceMappingURL=set.js.map