"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../../common/translations");
const GraphqlActions_1 = require("../../../../consts/GraphqlActions");
const configuraion_1 = require("../../../../common/configuraion");
const Environment_1 = require("../../../../consts/Environment");
const execute_1 = require("../../../../common/execute");
exports.default = {
    command: 'delete',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        configuraion_1.ProjectConfigurationState.expectConfigured(context);
        let { name } = params;
        context.spinner.start(context.i18n.t('environment_delete_in_progress'));
        yield execute_1.executeAsync(context, GraphqlActions_1.GraphqlAsyncActions.environmentDelete, { environmentName: name });
        context.spinner.stop();
        context.updateEnvironmentName(Environment_1.DEFAULT_ENVIRONMENT_NAME);
    }),
    describe: translations_1.translations.i18n.t('environment_delete_describe'),
    builder: (args) => args.usage(translations_1.translations.i18n.t('environment_delete_usage')).option('name', {
        alias: 'n',
        describe: translations_1.translations.i18n.t('environment_delete_name_describe'),
        type: 'string',
        demandOption: true,
    }),
};
//# sourceMappingURL=delete.js.map