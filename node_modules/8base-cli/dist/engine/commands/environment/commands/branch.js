"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../../common/translations");
const GraphqlActions_1 = require("../../../../consts/GraphqlActions");
const configuraion_1 = require("../../../../common/configuraion");
const execute_1 = require("../../../../common/execute");
const Common_1 = require("../../../../interfaces/Common");
exports.default = {
    command: 'branch',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        configuraion_1.ProjectConfigurationState.expectConfigured(context);
        let { name, mode } = params;
        context.spinner.start(context.i18n.t('environment_branch_in_progress'));
        yield execute_1.executeAsync(context, GraphqlActions_1.GraphqlAsyncActions.environmentBranch, { environmentName: name, mode });
        context.spinner.stop();
        context.updateEnvironmentName(name);
    }),
    describe: translations_1.translations.i18n.t('environment_branch_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('environment_branch_usage'))
        .option('name', {
        alias: 'n',
        describe: translations_1.translations.i18n.t('environment_branch_name_describe'),
        type: 'string',
        demandOption: true,
    })
        .option('mode', {
        alias: 'm',
        describe: translations_1.translations.i18n.t('deploy_mode_describe'),
        default: Common_1.MigrateMode.FULL,
        type: 'string',
        choices: Object.values(Common_1.MigrateMode),
    }),
};
//# sourceMappingURL=branch.js.map