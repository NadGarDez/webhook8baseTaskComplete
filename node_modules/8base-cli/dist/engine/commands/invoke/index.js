"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const translations_1 = require("../../../common/translations");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const projectController_1 = require("../../controllers/projectController");
exports.default = {
    command: 'invoke [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        context.spinner.start(context.i18n.t('invoke_in_progress'));
        let args = null;
        if (params.m) {
            args = projectController_1.ProjectController.getMock(context, params.name, params.m);
        }
        else if (params.p) {
            args = fs.readFileSync(params.p).toString();
        }
        else if (params.j) {
            args = params.j;
        }
        let resultResponse = null;
        let resultError = null;
        try {
            resultResponse = yield context.request(GraphqlActions_1.GraphqlActions.invoke, {
                data: { functionName: params.name, inputArgs: args },
            });
        }
        catch (e) {
            resultError = e;
        }
        context.spinner.stop();
        context.logger.info('Result:');
        if (resultError) {
            context.logger.info(JSON.stringify({
                data: {
                    [params.name]: null,
                },
                errors: resultError.response.errors,
            }, null, 2));
            throw new Error(translations_1.translations.i18n.t('invoke_returns_error', { name: params.name }));
        }
        else {
            context.logger.info(JSON.stringify({
                data: JSON.parse(resultResponse.invoke.responseData),
            }, null, 2));
        }
    }),
    describe: translations_1.translations.i18n.t('invoke_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('invoke_usage'))
            .positional('name', {
            describe: translations_1.translations.i18n.t('invokelocal_name_describe'),
            type: 'string',
        })
            .demandOption('name')
            .option('data-json', {
            alias: 'j',
            describe: translations_1.translations.i18n.t('invoke_data_json_describe'),
            type: 'string',
        })
            .option('data-path', {
            alias: 'p',
            describe: translations_1.translations.i18n.t('invoke_data_path_describe'),
            type: 'string',
        })
            .option('mock', {
            alias: 'm',
            describe: translations_1.translations.i18n.t('invoke_mock_describe'),
            type: 'string',
        });
    },
};
//# sourceMappingURL=index.js.map