"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const table_1 = require("table");
const changeCase = require("change-case");
const _ = require("lodash");
const translations_1 = require("../../../common/translations");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const Colors_1 = require("../../../consts/Colors");
const RESOLVERS_HEADER = ['Name', 'Description', 'Type'];
const TRIGGERS_HEADER = ['Name', 'Description', 'Type', 'Operation', 'Table'];
const WEBHOOKS_HEADER = ['Name', 'Description', 'Method', 'Path'];
const TASKS_HEADER = ['Name', 'Description', 'Schedule'];
exports.default = {
    command: 'describe [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        context.spinner.start(context.i18n.t('describe_progress'));
        let functionsList = (yield context.request(GraphqlActions_1.GraphqlActions.functionsList)).functionsList;
        context.spinner.stop();
        if (params.name) {
            const fn = _.find(functionsList.items, { name: params.name });
            if (fn) {
                Object.keys(fn).forEach(name => {
                    // @ts-ignore
                    context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)(`${changeCase.title(name)}:`)} ${fn[name]}`);
                });
            }
            else {
                throw new Error(translations_1.translations.i18n.t('describe_function_not_found', { name: params.name }));
            }
            return;
        }
        functionsList = _.groupBy(functionsList.items, 'functionType');
        context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)('Resolvers:')}`);
        const resolvers = functionsList.resolver || [];
        const triggers = functionsList.trigger || [];
        const webhooks = functionsList.webhook || [];
        const tasks = functionsList.task || [];
        if (resolvers.length > 0) {
            context.logger.info(table_1.table([
                RESOLVERS_HEADER,
                ...resolvers.map((resolver) => [resolver.name, resolver.description, resolver.gqlType]),
            ]));
        }
        else {
            context.logger.info(translations_1.translations.i18n.t('describe_empty_resolvers'));
            context.logger.info('');
        }
        context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)('Triggers:')}`);
        if (triggers.length > 0) {
            context.logger.info(table_1.table([
                TRIGGERS_HEADER,
                ...triggers.map((trigger) => [
                    trigger.name,
                    trigger.description,
                    trigger.type,
                    trigger.operation,
                    trigger.tableName,
                ]),
            ]));
        }
        else {
            context.logger.info(translations_1.translations.i18n.t('describe_empty_triggers'));
            context.logger.info('');
        }
        context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)('Webhooks:')}`);
        if (webhooks.length > 0) {
            context.logger.info(table_1.table([
                WEBHOOKS_HEADER,
                ...webhooks.map((webhook) => [
                    webhook.name,
                    webhook.description,
                    webhook.httpMethod,
                    webhook.workspaceRelativePath.toLowerCase(),
                ]),
            ]));
        }
        else {
            context.logger.info(translations_1.translations.i18n.t('describe_empty_webhooks'));
            context.logger.info('');
        }
        context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.yellow)('Tasks:')}`);
        if (tasks.length > 0) {
            context.logger.info(table_1.table([TASKS_HEADER, ...tasks.map((task) => [task.name, task.description, task.scheduleExpression])]));
        }
        else {
            context.logger.info(translations_1.translations.i18n.t('describe_empty_tasks'));
            context.logger.info('');
        }
    }),
    describe: translations_1.translations.i18n.t('describe_describe'),
    builder: (args) => {
        return args.usage(translations_1.translations.i18n.t('describe_usage'));
    },
};
//# sourceMappingURL=index.js.map