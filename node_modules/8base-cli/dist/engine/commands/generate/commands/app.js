"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const simplegit = require("simple-git/promise");
const translations_1 = require("../../../../common/translations");
const StorageParameters_1 = require("../../../../consts/StorageParameters");
const memfs_1 = require("../../../../common/memfs");
const generators_1 = require("@8base/generators");
exports.default = {
    command: 'app <appName>',
    describe: translations_1.translations.i18n.t('generate_app_describe'),
    builder: (yargs) => yargs.usage(translations_1.translations.i18n.t('generate_app_usage')),
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        if (!context.user.isAuthorized()) {
            throw new Error(context.i18n.t('logout_error'));
        }
        const { appName } = params;
        const git = simplegit('.');
        const workspaceId = context.workspaceId;
        context.spinner.start('Fetching project skeleton');
        yield git.clone('https://github.com/8base/react-app-starter.git', appName, ['--branch', generators_1.REPO_BRANCH_NAME]);
        yield fs.remove(path.join(appName, '.git'));
        process.chdir(appName);
        const fsObject = yield memfs_1.readFs([
            'src/Application.js',
            'src/components/Header.js',
            'apollo.config.js',
            'package.json',
            'package-lock.json',
        ]);
        const replacedFsObject = generators_1.replaceInitialApp(fsObject, {
            endpoint: `https://api.8base.com/${workspaceId}`,
            authClientId: context.storage.getValue(StorageParameters_1.StorageParameters.authClientId),
            authDomain: context.storage.getValue(StorageParameters_1.StorageParameters.authDomain),
            appName,
        }, {
            authMode: 'web',
        });
        yield memfs_1.writeFs(replacedFsObject);
        context.spinner.stop();
    }),
};
//# sourceMappingURL=app.js.map