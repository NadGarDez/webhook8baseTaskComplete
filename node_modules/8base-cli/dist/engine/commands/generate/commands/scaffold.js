"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const yaml = require("js-yaml");
const translations_1 = require("../../../../common/translations");
const interactive_1 = require("../../../../common/interactive");
const memfs_1 = require("../../../../common/memfs");
const utils_1 = require("@8base/utils");
const generators_1 = require("@8base/generators");
const api_client_1 = require("@8base/api-client");
const promptColumns = (columns, message) => __awaiter(this, void 0, void 0, function* () {
    const result = yield interactive_1.Interactive.ask({
        name: 'columns',
        type: 'multiselect',
        message: message,
        choices: columns.map(column => {
            return {
                title: column,
                value: column,
            };
        }),
    });
    return result.columns;
});
const getTable = (tables, tableName) => {
    const table = tables.find(({ name, displayName }) => tableName.toLowerCase() === name.toLowerCase() || tableName.toLowerCase() === displayName.toLowerCase());
    if (!table) {
        throw new Error(translations_1.translations.i18n.t('generate_scaffold_table_error', { tableName }));
    }
    return table;
};
const getColumnsNames = (params, tables) => {
    const { name } = getTable(tables, params.tableName);
    const table = getTable(tables, name);
    const columns = utils_1.createQueryColumnsList(tables, table.id, { deep: params.depth, withMeta: params.withMeta });
    const columnsNames = columns.map(({ name }) => name);
    return columnsNames;
};
const createTemplateFs = (tables, screen, config, context) => __awaiter(this, void 0, void 0, function* () {
    const rootFile = yield fs.readFile('src/Root.js', 'utf8');
    const fsObject = generators_1.generateScreen({
        tablesList: tables,
        screen,
        rootFile,
    }, { deep: config.depth });
    try {
        if (fs.existsSync(Object.keys(fsObject)[0])) {
            throw new Error(translations_1.translations.i18n.t('generate_scaffold_crud_exist_error'));
        }
        yield memfs_1.writeFs(fsObject);
        Object.keys(fsObject).forEach(filePath => context.logger.info(filePath));
        context.logger.info(context.i18n.t('generate_scaffold_successfully_created', { screenName: screen.screenName }));
    }
    catch (err) {
        context.logger.error(err);
        context.logger.error(context.i18n.t('generate_scaffold_was_not_created', { screenName: screen.screenName }));
    }
});
exports.default = {
    command: 'scaffold <tableName>',
    describe: translations_1.translations.i18n.t('generate_scaffold_describe'),
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.spinner.start('Fetching table data');
        const tables = yield api_client_1.exportTables(context.request.bind(context), { withSystemTables: true });
        const { name, id } = getTable(tables, params.tableName);
        context.spinner.stop();
        let eightBaseConfig;
        try {
            eightBaseConfig = yaml.safeLoad(yield fs.readFile('.8base.yml', 'utf8'));
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                throw new Error(translations_1.translations.i18n.t('generate_scaffold_project_file_error', { projectFileName: '.8base.yml' }));
            }
            else {
                throw err;
            }
        }
        const { appName } = eightBaseConfig;
        if (!appName)
            throw new Error(translations_1.translations.i18n.t('generate_scaffold_project_name_error', { projectFileName: '.8base.yml' }));
        let tableFields, formFields;
        if (!params.all) {
            const columnsTableNames = getColumnsNames(Object.assign({}, params, { withMeta: true }), tables);
            tableFields = (yield promptColumns(columnsTableNames, 'Choose table fields')) || [];
            const columnsFormNames = getColumnsNames(Object.assign({}, params, { withMeta: false, depth: 1 }), tables);
            formFields = (yield promptColumns(columnsFormNames, 'Choose form fields')) || [];
        }
        const generatorScreen = {
            tableId: id,
            screenName: name,
            formFields: formFields,
            tableFields: tableFields,
        };
        const generatorConfig = {
            depth: params.depth,
        };
        yield createTemplateFs(tables, generatorScreen, generatorConfig, context);
    }),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('generate_scaffold_usage'))
            .option('depth', {
            describe: translations_1.translations.i18n.t('generate_scaffold_depth_describe'),
            type: 'number',
            default: 1,
        })
            .option('all', {
            type: 'boolean',
            default: false,
            hidden: true,
        });
    },
};
//# sourceMappingURL=scaffold.js.map