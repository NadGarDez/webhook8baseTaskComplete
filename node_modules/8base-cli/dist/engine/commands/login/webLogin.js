"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cuid = require("cuid");
const opn = require('opn');
require("isomorphic-fetch");
const utils_1 = require("../../../common/utils");
exports.webLogin = (params, context) => __awaiter(this, void 0, void 0, function* () {
    context.spinner.start(context.i18n.t('login_in_progress'));
    const session = cuid();
    yield opn(`${utils_1.Utils.trimLastSlash(params.w)}/cli?guid=${session}`, { wait: false });
    const timeoutMs = 2000;
    let retryCount = 150; // 150 * 2s = 300s = 5 min
    let res = null;
    while (--retryCount > 0) {
        context.logger.debug(`try to fetch session ${session}`);
        const fetchResult = yield fetch(`${utils_1.Utils.trimLastSlash(context.resolveMainServerAddress())}/loginSessionGet/${session}`);
        if (fetchResult.status === 404) {
            context.logger.debug(`session not present`);
            yield utils_1.Utils.sleep(timeoutMs);
            continue;
        }
        if (fetchResult.status !== 200) {
            throw new Error(yield fetchResult.text());
        }
        res = yield fetchResult.json();
        retryCount = 0;
    }
    if (!res) {
        throw new Error(context.i18n.t('login_timeout_error'));
    }
    context.setSessionInfo(res);
    return {
        idToken: res.idToken,
        refreshToken: res.refreshToken,
    };
});
//# sourceMappingURL=webLogin.js.map