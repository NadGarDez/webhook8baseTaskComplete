"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const logout_1 = require("../logout");
require("isomorphic-fetch");
const config_1 = require("../../../config");
const passwordLogin_1 = require("./passwordLogin");
const webLogin_1 = require("./webLogin");
exports.default = {
    command: 'login',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        if (params.token) {
            context.setSessionInfo({ idToken: params.token });
            context.spinner.stop();
            return;
        }
        if (params.email && params.password) {
            const result = yield passwordLogin_1.passwordLogin(params, context);
            context.setSessionInfo(result);
            context.spinner.stop();
            return;
        }
        yield logout_1.default.handler();
        const result = yield webLogin_1.webLogin(params, context);
        context.setSessionInfo(result);
        context.spinner.stop();
    }),
    describe: translations_1.translations.i18n.t('login_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('login_usage'))
            .option('email', {
            alias: 'e',
            describe: translations_1.translations.i18n.t('login_email_describe'),
            type: 'string',
        })
            .option('password', {
            alias: 'p',
            describe: translations_1.translations.i18n.t('login_password_describe'),
            type: 'string',
        })
            .option('token', {
            alias: 't',
            describe: translations_1.translations.i18n.t('login_token_describe'),
            type: 'string',
        })
            .option('w', {
            type: 'string',
            default: config_1.StaticConfig.webClientAddress,
            hidden: true,
        })
            .example(translations_1.translations.i18n.t('login_browser_example_command'), translations_1.translations.i18n.t('login_browser_example'))
            .example(translations_1.translations.i18n.t('login_cli_example_command'), translations_1.translations.i18n.t('login_cli_example'));
    },
};
//# sourceMappingURL=index.js.map