"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const translations_1 = require("../../../common/translations");
const api_client_1 = require("@8base/api-client");
exports.default = {
    command: 'export',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.spinner.start(context.i18n.t('export_in_progress'));
        if (!params.file) {
            throw new Error(translations_1.translations.i18n.t('export_file_required_option_error'));
        }
        if (params.workspace) {
            yield context.checkWorkspace(params.workspace);
        }
        const gqlRequest = context.request.bind(context);
        const tables = yield api_client_1.exportTables((query, variables) => gqlRequest(query, variables, true, params.workspace));
        const exportResult = {
            tables,
            version: context.version,
        };
        fs.writeFileSync(params.file, JSON.stringify(exportResult, null, 2));
        context.spinner.stop();
    }),
    describe: translations_1.translations.i18n.t('export_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('export_usage'))
            .option('file', {
            alias: 'f',
            describe: translations_1.translations.i18n.t('export_file_describe'),
            type: 'string',
            demandOption: translations_1.translations.i18n.t('export_file_required_option_error'),
        })
            .option('workspace', {
            alias: 'w',
            describe: translations_1.translations.i18n.t('export_workspace_describe'),
            type: 'string',
        });
    },
};
//# sourceMappingURL=index.js.map