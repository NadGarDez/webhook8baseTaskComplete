"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const graphqlController_1 = require("../../controllers/graphqlController");
const translations_1 = require("../../../common/translations");
const Extensions_1 = require("../../../interfaces/Extensions");
const execute_1 = require("../../../common/execute");
exports.default = {
    command: 'deploy',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        if (params['validate_schema']) {
            graphqlController_1.GraphqlController.validateSchema(context.project);
        }
        let deployOptions = { mode: params.mode };
        if (Array.isArray(params.plugins) && params.plugins.length > 0) {
            deployOptions = _.set(deployOptions, 'pluginNames', params.plugins);
        }
        if (Array.isArray(params.functions) && params.functions.length > 0) {
            deployOptions = _.set(deployOptions, 'extensionNames', params.functions);
        }
        yield execute_1.executeDeploy(context, deployOptions);
    }),
    describe: translations_1.translations.i18n.t('deploy_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('deploy_usage'))
        .option('plugins', {
        alias: 'p',
        describe: translations_1.translations.i18n.t('deploy_plugins_describe'),
        type: 'array',
    })
        .option('functions', {
        alias: 'f',
        describe: translations_1.translations.i18n.t('deploy_functions_describe'),
        type: 'array',
    })
        .option('mode', {
        alias: 'm',
        describe: translations_1.translations.i18n.t('deploy_mode_describe'),
        default: Extensions_1.DeployModeType.project,
        type: 'string',
        choices: Object.values(Extensions_1.DeployModeType),
    }),
};
//# sourceMappingURL=index.js.map