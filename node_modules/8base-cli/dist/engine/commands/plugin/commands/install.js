"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const path = require("path");
const _ = require("lodash");
const AdmZip = require("adm-zip");
const graphql_request_1 = require("graphql-request");
const changeCase = require("change-case");
const translations_1 = require("../../../../common/translations");
const projectController_1 = require("../../../controllers/projectController");
const PLUGINS_LIST_QUERY = `
  query PluginsList {
    pluginsList {
      items {
        name
        gitHubUrl
      }
    }
  }
`;
exports.default = {
    command: 'install [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        const { name } = params;
        let plugins = _.get(yield graphql_request_1.request('https://api.8base.com/ck16gpwki001f01jgh4kvd54j', PLUGINS_LIST_QUERY), ['pluginsList', 'items']);
        const plugin = _.find(plugins, { name });
        if (!plugin) {
            throw new Error(context.i18n.t('plugin_install_cant_find', {
                name,
            }));
        }
        yield new Promise((resolve, reject) => {
            request({
                url: `${plugin.gitHubUrl}/archive/master.zip`,
                method: 'GET',
                encoding: null,
            }, (err, response, body) => {
                if (err) {
                    throw new Error(context.i18n.t('plugin_install_cant_download', {
                        name,
                    }));
                }
                try {
                    const zip = new AdmZip(body);
                    const zipEntries = zip.getEntries();
                    zipEntries.forEach((zipEntry) => {
                        if (!zipEntry.isDirectory) {
                            let targetPath = zipEntry.entryName.replace(/^[^\/]+\//, '');
                            const filePath = `plugins/${name}/${targetPath}`;
                            targetPath = targetPath.replace(/\/?[^\/]+$/, '');
                            targetPath = path.resolve(`./plugins/${name}/${targetPath}`);
                            zip.extractEntryTo(zipEntry.entryName, targetPath, false, true);
                            context.logger.info(context.i18n.t('project_created_file', {
                                path: filePath,
                            }));
                        }
                    });
                    projectController_1.ProjectController.addPluginDeclaration(context, changeCase.camelCase(name), {
                        name,
                        path: `plugins/${name}/8base.yml`,
                    }, '.');
                }
                catch (e) {
                    reject(e);
                }
                resolve();
            });
        });
        context.logger.info(context.i18n.t('plugin_successfully_install', {
            name,
        }));
    }),
    describe: translations_1.translations.i18n.t('plugin_install_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('plugin_install_usage'))
        .positional('name', {
        describe: translations_1.translations.i18n.t('plugin_install_name_describe'),
        type: 'string',
    })
        .demandOption('name'),
};
//# sourceMappingURL=install.js.map