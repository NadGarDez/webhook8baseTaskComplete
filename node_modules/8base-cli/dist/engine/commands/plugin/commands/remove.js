"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const rimraf = require("rimraf");
const R = require("ramda");
const translations_1 = require("../../../../common/translations");
exports.default = {
    command: 'remove [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        const { name } = params;
        const pluginPath = `./plugins/${name}`;
        if (!fs.existsSync(pluginPath)) {
            throw new Error(translations_1.translations.i18n.t('plugin_remove_plugin_not_found', { name }));
        }
        yield new Promise((resolve, reject) => {
            try {
                rimraf(path.resolve(pluginPath), {}, resolve);
            }
            catch (e) {
                reject(e);
            }
        });
        let projectConfig = context.projectConfig;
        // @ts-ignore
        projectConfig = R.evolve({
            plugins: R.reject(R.propEq('name', name)),
        })(projectConfig);
        context.projectConfig = projectConfig;
        context.logger.info(context.i18n.t('plugin_successfully_remove', {
            name,
        }));
    }),
    describe: translations_1.translations.i18n.t('plugin_remove_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('plugin_remove_usage'))
        .positional('name', {
        describe: translations_1.translations.i18n.t('plugin_remove_name_describe'),
        type: 'string',
    })
        .demandOption('name'),
};
//# sourceMappingURL=remove.js.map