"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../../common/translations");
const GraphqlActions_1 = require("../../../../consts/GraphqlActions");
const configuraion_1 = require("../../../../common/configuraion");
const chalk_1 = require("chalk");
const Colors_1 = require("../../../../consts/Colors");
const table_1 = require("table");
const _ = require("lodash");
const execute_1 = require("../../../../common/execute");
const Extensions_1 = require("../../../../interfaces/Extensions");
exports.default = {
    command: 'status',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        configuraion_1.ProjectConfigurationState.expectHasProject(context);
        yield execute_1.executeDeploy(context, { mode: Extensions_1.DeployModeType.migrations }, { customEnvironment: params.environment });
        context.spinner.start(context.i18n.t('migration_status_in_progress'));
        const { system } = yield context.request(GraphqlActions_1.GraphqlActions.migrationStatus, {}, { customEnvironment: params.environment });
        const { status, migrations } = system.ciStatus;
        context.spinner.stop();
        context.logger.info(`${chalk_1.default.hex(Colors_1.Colors.green)('Status:')}: ${status}`);
        if (migrations && !_.isEmpty(migrations))
            context.logger.info(table_1.table([['migrations'], ...migrations.map((m) => [m])]));
    }),
    describe: translations_1.translations.i18n.t('migration_status_describe'),
    builder: (args) => args.usage(translations_1.translations.i18n.t('migration_status_usage')).option('environment', {
        alias: 'e',
        describe: translations_1.translations.i18n.t('migration_status_environment_describe'),
        type: 'string',
    }),
};
//# sourceMappingURL=status.js.map