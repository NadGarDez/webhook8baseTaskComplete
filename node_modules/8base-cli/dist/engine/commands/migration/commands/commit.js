"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../../common/translations");
const execute_1 = require("../../../../common/execute");
const GraphqlActions_1 = require("../../../../consts/GraphqlActions");
const configuraion_1 = require("../../../../common/configuraion");
const Extensions_1 = require("../../../../interfaces/Extensions");
const Common_1 = require("../../../../interfaces/Common");
const Environment_1 = require("../../../../consts/Environment");
const interactive_1 = require("../../../../common/interactive");
exports.default = {
    command: 'commit',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        configuraion_1.ProjectConfigurationState.expectHasProject(context);
        context.initializeProject();
        const environment = params.environment ? params.environment : context.workspaceConfig.environmentName;
        if (environment === Environment_1.DEFAULT_ENVIRONMENT_NAME && !params.force) {
            const { confirm } = yield interactive_1.Interactive.ask({
                name: 'confirm',
                type: 'confirm',
                message: translations_1.translations.i18n.t('migration_commit_dest_env_master'),
                initial: false,
            });
            if (!confirm) {
                throw new Error(translations_1.translations.i18n.t('migration_commit_canceled'));
            }
        }
        const options = { customEnvironment: environment };
        yield execute_1.executeDeploy(context, { mode: Extensions_1.DeployModeType.migrations }, options);
        context.spinner.start(context.i18n.t('migration_commit_in_progress'));
        const { buildName } = params.mode === Common_1.CommitMode.ONLY_PROJECT || params.mode === Common_1.CommitMode.FULL
            ? yield execute_1.uploadProject(context, options)
            : { buildName: null };
        yield execute_1.executeAsync(context, GraphqlActions_1.GraphqlAsyncActions.commit, { mode: params.mode, build: buildName }, { customEnvironment: environment });
        context.spinner.stop();
    }),
    describe: translations_1.translations.i18n.t('migration_commit_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('migration_commit_usage'))
        .option('mode', {
        alias: 'm',
        describe: translations_1.translations.i18n.t('migration_commit_mode_describe'),
        default: Common_1.CommitMode.FULL,
        type: 'string',
        choices: Object.values(Common_1.CommitMode),
    })
        .option('force', {
        alias: 'f',
        describe: translations_1.translations.i18n.t('migration_force_describe'),
    })
        .option('environment', {
        alias: 'e',
        describe: translations_1.translations.i18n.t('migration_environment_describe'),
        type: 'string',
    }),
};
//# sourceMappingURL=commit.js.map