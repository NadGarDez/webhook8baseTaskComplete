"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const translations_1 = require("../../../common/translations");
const interactive_1 = require("../../../common/interactive");
const Environment_1 = require("../../../consts/Environment");
const _ = require("lodash");
exports.default = {
    command: 'configure',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        let { workspaceId, host } = params;
        if (!workspaceId) {
            const workspaces = yield context.getWorkspaces();
            ({ workspaceId } = yield interactive_1.Interactive.ask({
                name: 'workspaceId',
                type: 'select',
                message: translations_1.translations.i18n.t('configure_select_workspace'),
                choices: workspaces.map((workspace) => ({
                    title: workspace.name,
                    value: workspace.id,
                })),
            }));
            if (!workspaceId) {
                throw new Error(translations_1.translations.i18n.t('configure_prevent_select_workspace'));
            }
            const workspace = _.find(workspaces, { id: workspaceId });
            if (!workspace) {
                throw new Error(context.i18n.t('workspace_with_id_doesnt_exist', { id: workspaceId }));
            }
            host = workspace.apiHost;
        }
        context.updateWorkspace({
            apiHost: host || Environment_1.DEFAULT_REMOTE_ADDRESS,
            workspaceId,
            environmentName: Environment_1.DEFAULT_ENVIRONMENT_NAME,
        });
    }),
    describe: translations_1.translations.i18n.t('configure_describe'),
    builder: (args) => args
        .usage(translations_1.translations.i18n.t('configure_usage'))
        .option('workspaceId', {
        alias: 'w',
        describe: translations_1.translations.i18n.t('configure_workspace_id_describe'),
        type: 'string',
    })
        .option('host', {
        describe: translations_1.translations.i18n.t('configure_workspace_host_describe'),
        type: 'string',
        default: Environment_1.DEFAULT_REMOTE_ADDRESS,
    }),
};
//# sourceMappingURL=index.js.map