"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const chalk_1 = require("chalk");
const luxon_1 = require("luxon");
const GraphqlActions_1 = require("../../../consts/GraphqlActions");
const translations_1 = require("../../../common/translations");
var LogTagType;
(function (LogTagType) {
    LogTagType["ERROR"] = "ERROR";
    LogTagType["INFO"] = "INFO";
    LogTagType["START"] = "START";
    LogTagType["END"] = "END";
    LogTagType["REPORT"] = "REPORT";
})(LogTagType = exports.LogTagType || (exports.LogTagType = {}));
exports.LOG_TAG_COLORS = {
    [LogTagType.ERROR]: chalk_1.default.red,
    [LogTagType.INFO]: chalk_1.default.cyan,
    [LogTagType.START]: chalk_1.default.dim,
    [LogTagType.END]: chalk_1.default.dim,
    [LogTagType.REPORT]: chalk_1.default.green,
};
const printRequestId = (id) => chalk_1.default.grey(id);
const printTag = (tag) => {
    return exports.LOG_TAG_COLORS[tag](`[${tag}]       `.slice(0, 8));
};
const beautifyLogLine = (line) => {
    line = line.replace(/\t/g, ' ');
    line = line.replace(/\n$/, '');
    if (/^START RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*([\s\S]*)/.test(line)) {
        line = line.replace(/^START RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*([\s\S]*)/, (substr, id, text) => {
            return printRequestId(id) + ` ${printTag(LogTagType.START)} ` + chalk_1.default.dim(text);
        });
    }
    if (/^REPORT RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*([\s\S]*)/.test(line)) {
        line = line.replace(/^REPORT RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*([\s\S]*)/, (substr, id, text) => {
            return printRequestId(id) + ` ${printTag(LogTagType.REPORT)} ` + chalk_1.default.green(text);
        });
        line += '\n';
    }
    if (/^END RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*/.test(line)) {
        line = line.replace(/^END RequestId: (\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\s*/, (substr, id) => {
            return printRequestId(id) + ` ${printTag(LogTagType.END)}`;
        });
    }
    if (/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z) (\w{8}-\w{4}-\w{4}-\w{4}-\w{12}) ERROR Invoke Error\s*([\s\S]*)/.test(line)) {
        line = line.replace(/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z) (\w{8}-\w{4}-\w{4}-\w{4}-\w{12}) ERROR Invoke Error\s*([\s\S]*)/, (substr, dt, id, text) => {
            try {
                text = JSON.stringify(JSON.parse(text), null, 2);
            }
            catch (e) { }
            return (printRequestId(id) +
                ' ' +
                printTag(LogTagType.ERROR) +
                chalk_1.default.red(` Datetime: ${luxon_1.DateTime.fromISO(dt).toFormat('F')}\n`) +
                text);
        });
    }
    if (/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z) (\w{8}-\w{4}-\w{4}-\w{4}-\w{12}) INFO\s*([\s\S]*)/.test(line)) {
        line = line.replace(/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z) (\w{8}-\w{4}-\w{4}-\w{4}-\w{12}) INFO\s*([\s\S]*)/, (substr, dt, id, text) => {
            try {
                text = JSON.stringify(JSON.parse(text), null, 2);
            }
            catch (e) { }
            return (printRequestId(id) +
                ' ' +
                printTag(LogTagType.INFO) +
                chalk_1.default.cyan(` Datetime: ${luxon_1.DateTime.fromISO(dt).toFormat('F')} \n`) +
                text);
        });
    }
    return line;
};
const printLogs = (logs) => {
    logs
        .map((line) => beautifyLogLine(line))
        .forEach((line) => {
        // eslint-disable-next-line no-console
        console.log(line);
    });
};
const sleep = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
let lastMessage = '';
const filterMessage = (messages) => {
    const index = messages.indexOf(lastMessage);
    if (index === -1) {
        lastMessage = messages.length > 0 ? _.last(messages) : '';
        return messages;
    }
    if (index + 1 === messages.length) {
        return [];
    }
    lastMessage = _.last(messages);
    return _.slice(messages, index + 1);
};
const readLogs = (functionName, context) => __awaiter(this, void 0, void 0, function* () {
    let attempt = 0;
    let error = null;
    while (error === null) {
        const MS_PER_MINUTE = 60000;
        const minutes = 3;
        const start = new Date(Date.now() - minutes * MS_PER_MINUTE);
        if (attempt === 0) {
            context.spinner.start(translations_1.translations.i18n.t('logs_tail_in_progress'));
        }
        let result;
        try {
            result = yield context.request(GraphqlActions_1.GraphqlActions.logs, {
                functionName,
                startTime: start.toISOString(),
            });
        }
        catch (e) {
            error = e;
        }
        context.spinner.stop();
        if (attempt === 0) {
            if (error) {
                context.logger.error(translations_1.translations.i18n.t('logs_tail_failed'));
                continue;
            }
            else {
                context.logger.info(translations_1.translations.i18n.t('logs_tail_success'));
            }
        }
        const logs = filterMessage(result.logs);
        if (logs.length > 0) {
            printLogs(logs);
        }
        if (attempt !== 0) {
            context.spinner.start(translations_1.translations.i18n.t('logs_tail_wait'));
        }
        yield sleep(1000);
        attempt = attempt + 1;
    }
});
exports.default = {
    command: 'logs [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        if (params.n > 100) {
            params.n = 100;
        }
        if (params['t']) {
            return yield readLogs(params.name, context);
        }
        context.spinner.start(context.i18n.t('logs_in_progress'));
        const result = yield context.request(GraphqlActions_1.GraphqlActions.logs, {
            functionName: params.name,
            limit: params.n,
        });
        context.spinner.stop();
        printLogs(result.logs);
    }),
    describe: translations_1.translations.i18n.t('logs_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('logs_usage'))
            .positional('name', {
            describe: translations_1.translations.i18n.t('logs_name_describe'),
            type: 'string',
        })
            .demandOption('name')
            .option('num', {
            alias: 'n',
            default: 10,
            describe: translations_1.translations.i18n.t('logs_num_describe'),
            type: 'number',
        })
            .option('tail', {
            alias: 't',
            describe: translations_1.translations.i18n.t('logs_tail_describe'),
            type: 'boolean',
        });
    },
};
//# sourceMappingURL=index.js.map