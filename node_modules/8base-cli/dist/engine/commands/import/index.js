"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const fs = require("fs");
const translations_1 = require("../../../common/translations");
const api_client_1 = require("@8base/api-client");
exports.default = {
    command: 'import',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        let schema;
        if (fs.existsSync(params.file)) {
            try {
                schema = JSON.parse(fs.readFileSync(params.file, 'utf8'));
            }
            catch (e) {
                throw new Error(translations_1.translations.i18n.t('import_cant_parse_schema'));
            }
        }
        else {
            throw new Error(translations_1.translations.i18n.t('import_file_not_exist'));
        }
        if (params.workspace) {
            yield context.checkWorkspace(params.workspace);
        }
        if (params.schema) {
            context.spinner.start(context.i18n.t('import_schema_in_progress'));
            const gqlRequest = context.request.bind(context);
            yield api_client_1.importTables((query, variables) => gqlRequest(query, variables, true, params.workspace), _.get(schema, 'tables', {}), { debug: params.d });
            context.spinner.stop();
        }
        if (params.data) {
            context.spinner.start(context.i18n.t('import_data_in_progress'));
            const gqlRequest = context.request.bind(context);
            yield api_client_1.importData((query, variables) => gqlRequest(query, variables, true, params.workspace), _.get(schema, 'data', {}), { maxThreads: 2 });
            context.spinner.stop();
        }
    }),
    describe: translations_1.translations.i18n.t('import_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('import_usage'))
            .option('file', {
            alias: 'f',
            demandOption: true,
            describe: translations_1.translations.i18n.t('import_file_describe'),
            type: 'string',
        })
            .option('schema', {
            describe: translations_1.translations.i18n.t('import_schema_describe'),
            default: true,
            type: 'boolean',
        })
            .option('data', {
            describe: translations_1.translations.i18n.t('import_data_describe'),
            default: true,
            type: 'boolean',
        })
            .option('workspace', {
            alias: 'w',
            describe: translations_1.translations.i18n.t('import_workspace_describe'),
            type: 'string',
        });
    },
};
//# sourceMappingURL=index.js.map