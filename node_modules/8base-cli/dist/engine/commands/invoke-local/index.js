"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const chalk_1 = require("chalk");
const dotenv = require("dotenv");
const path = require("path");
const translations_1 = require("../../../common/translations");
const utils_1 = require("../../../common/utils");
const buildController_1 = require("../../controllers/buildController");
const Colors_1 = require("../../../consts/Colors");
const invokeLocal_1 = require("../../../errors/invokeLocal");
const projectController_1 = require("../../controllers/projectController");
const getLocalFunction = (functionName, context) => __awaiter(this, void 0, void 0, function* () {
    const { compiledFiles } = yield buildController_1.BuildController.compile(context);
    const functionInfo = context.project.extensions.functions.find(r => r.name === functionName);
    if (!functionInfo) {
        throw new Error(`Function ${chalk_1.default.hex(Colors_1.Colors.yellow)(functionName)} not present.`);
    }
    const safeFunctionPath = functionInfo.pathToFunction.substring(0, functionInfo.pathToFunction.lastIndexOf('.'));
    const functionPath = compiledFiles.find((f) => f.search(safeFunctionPath) > 0);
    context.logger.debug(`Function full path: ${functionPath}`);
    const { result, error } = utils_1.Utils.safeExecution(() => require(functionPath));
    if (error) {
        throw new invokeLocal_1.InvokeLocalError(error.message, functionInfo.name, functionPath);
    }
    const functionToCall = utils_1.Utils.undefault(result);
    return functionToCall;
});
exports.default = {
    command: 'invoke-local [name]',
    handler: (params, context) => __awaiter(this, void 0, void 0, function* () {
        context.initializeProject();
        dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });
        context.spinner.start(context.i18n.t('invokelocal_in_progress'));
        const functionToCall = yield getLocalFunction(params.name, context);
        let args = null;
        if (params.m) {
            args = projectController_1.ProjectController.getMock(context, params.name, params.m);
        }
        else if (params.p) {
            args = fs.readFileSync(params.p);
        }
        else if (params.j) {
            args = params.j;
        }
        let resultResponse = null;
        let resultError = null;
        const ctx = {
            api: {
                gqlRequest: context.request.bind(context),
            },
            invokeFunction: (functionName, args) => __awaiter(this, void 0, void 0, function* () {
                const functionToCall = yield getLocalFunction(functionName, context);
                let result = null;
                try {
                    result = yield functionToCall(args, ctx);
                }
                catch (e) {
                    return {
                        completed: false,
                        error: String(e),
                        result,
                    };
                }
                return {
                    completed: true,
                    error: null,
                    result,
                };
            }),
            workspaceId: context.workspaceId,
        };
        try {
            resultResponse = yield functionToCall(JSON.parse(args), ctx);
        }
        catch (e) {
            resultError = e;
        }
        buildController_1.BuildController.clearBuild(context);
        context.spinner.stop();
        context.logger.info('Result:');
        if (resultError) {
            context.logger.info(JSON.stringify({
                data: {
                    [params.name]: null,
                },
                errors: [
                    {
                        message: String(resultError.message),
                        path: [params.name],
                        locations: [
                            {
                                line: 2,
                                column: 5,
                            },
                        ],
                        code: null,
                        details: null,
                    },
                ],
            }, null, 2));
            throw new Error(translations_1.translations.i18n.t('invokelocal_returns_error', { name: params.name }));
        }
        else {
            context.logger.info(JSON.stringify(resultResponse, null, 2));
        }
    }),
    describe: translations_1.translations.i18n.t('invokelocal_describe'),
    builder: (args) => {
        return args
            .usage(translations_1.translations.i18n.t('invokelocal_usage'))
            .positional('name', {
            describe: translations_1.translations.i18n.t('invokelocal_name_describe'),
            type: 'string',
        })
            .demandOption('name')
            .option('data-json', {
            alias: 'j',
            describe: translations_1.translations.i18n.t('invokelocal_data_json_describe'),
            type: 'string',
        })
            .option('data-path', {
            alias: 'p',
            describe: translations_1.translations.i18n.t('invokelocal_data_path_describe'),
            type: 'string',
        })
            .option('mock', {
            alias: 'm',
            describe: translations_1.translations.i18n.t('invokelocal_mock_describe'),
            type: 'string',
        });
    },
};
//# sourceMappingURL=index.js.map