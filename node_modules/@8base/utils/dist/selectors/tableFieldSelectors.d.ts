import { ParametricSelector } from 'reselect';
import { FieldSchema } from '../types';
export declare const getTableField: (tableField: FieldSchema) => FieldSchema;
export declare const getFieldType: any;
export declare const getFieldTypesAttributes: import("reselect").OutputSelector<FieldSchema, {
    [key: string]: any;
}, (res: FieldSchema) => {
    [key: string]: any;
}>;
export declare const isRelationField: import("reselect").OutputSelector<unknown, boolean, (res: "RELATION") => boolean>;
export declare const isFileField: import("reselect").OutputSelector<unknown, boolean, (res: "FILE") => boolean>;
export declare const isSmartField: import("reselect").OutputSelector<unknown, boolean, (res: "SMART") => boolean>;
export declare const isIdField: import("reselect").OutputSelector<unknown, boolean, (res: "ID") => boolean>;
export declare const isMetaField: import("reselect").OutputSelector<FieldSchema, boolean, (res: FieldSchema) => boolean>;
export declare const isListField: import("reselect").OutputSelector<FieldSchema, boolean, (res: FieldSchema) => boolean>;
export declare const isSystemField: import("reselect").OutputSelector<FieldSchema, boolean, (res: FieldSchema) => boolean>;
export declare const getFieldName: import("reselect").OutputSelector<FieldSchema, string, (res: FieldSchema) => string>;
export declare const getRelationTableId: ParametricSelector<FieldSchema, void, string>;
export declare const getRelationTableName: ParametricSelector<FieldSchema, void, string>;
//# sourceMappingURL=tableFieldSelectors.d.ts.map