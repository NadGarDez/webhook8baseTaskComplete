"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateCreateForm = void 0;

var _schemaNameGenerator = require("@8base/schema-name-generator");

var _utils = require("@8base/utils");

var changeCase = _interopRequireWildcard(require("change-case"));

var ejs = _interopRequireWildcard(require("ejs"));

var pluralize = _interopRequireWildcard(require("pluralize"));

var _formatCode = require("../../formatCode");

var _utils2 = require("../../utils");

var _chunks = require("../chunks");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

/* babel-plugin-inline-import './createForm.js.ejs' */
// @ts-ignore
var createForm = "import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, graphql } from 'react-apollo';\nimport { Form as FormLogic, Field, FieldArray } from '@8base/forms';\nimport {\n  Dialog,\n  Grid,\n  Button,\n  Form,\n  Row,\n  Column,\n  Icon,\n  Text,\n  SelectField,\n  InputField,\n  CheckboxField,\n  DateInputField,\n  Label,\n  ModalContext,\n} from '@8base/boost';\nimport { AddressInputField, PhoneInputField, ListFields, FileInputField } from '../../shared/components'\n\nconst <%= changeCase.upper(entityName)%>_CREATE_MUTATION = gql`\n  mutation <%= changeCase.pascal(entityName)%>Create($data: <%= SchemaNameGenerator.getCreateInputName(tableName)%>!) {\n    <%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>(data: $data) {\n      id\n    }\n  }\n`;\n\n<%- chunks.createEditComponents({\n    fields: fields,\n    SchemaNameGenerator: SchemaNameGenerator,\n    changeCase: changeCase,\n    chunks: chunks,\n    tableSelectors: tableSelectors,\n    table: table,\n}); %>\nconst enhancer = graphql(<%= changeCase.upper(entityName)%>_CREATE_MUTATION, {\n  name: '<%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>',\n  options: {\n    refetchQueries: ['<%=changeCase.pascal(tableName)%>TableContent', '<%= changeCase.pascal(SchemaNameGenerator.getTableListFieldName(tableName))%>'],\n    context: {\n      TOAST_SUCCESS_MESSAGE: '<%= changeCase.pascal(entityName)%> successfully created',\n    },\n  },\n});\n\nconst <%= changeCase.pascal(entityName)%>CreateDialog = enhancer(\n  class <%= changeCase.pascal(entityName)%>CreateDialog extends React.PureComponent {\n    static contextType = ModalContext;\n\n    onSubmit = async data => {\n      await this.props.<%= SchemaNameGenerator.getCreateItemFieldName(tableName)%>({ variables: { data } });\n\n      this.context.closeModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');\n    };\n\n    onClose = () => {\n      this.context.closeModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');\n    };\n\n    renderFormContent = ({ handleSubmit, invalid, submitting, pristine }) => (\n      <form onSubmit={handleSubmit}>\n        <Dialog.Header title=\"New <%= changeCase.pascal(entityName)%>\" onClose={this.onClose} />\n        <Dialog.Body scrollable>\n          <Grid.Layout gap=\"md\" stretch><%-\n            chunks.fieldsInputsList({ \n              fields: fields, \n              chunks: chunks,\n              changeCase: changeCase,\n              pluralize: pluralize,\n              SchemaNameGenerator: SchemaNameGenerator,\n            });%>\n          </Grid.Layout>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Button color=\"neutral\" type=\"button\" variant=\"outlined\" disabled={submitting} onClick={this.onClose}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" type=\"submit\" loading={submitting}>\n            Create <%= changeCase.pascal(entityName)%>\n          </Button>\n        </Dialog.Footer>\n      </form>\n    );\n\n    render() {\n      return (\n        <Dialog id={'<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID'} size=\"sm\">\n          <FormLogic type=\"CREATE\" tableSchemaName=\"<%= tableName%>\" onSubmit={this.onSubmit} formatRelationToIds>\n            {this.renderFormContent}\n          </FormLogic>\n        </Dialog>\n      );\n    }\n  }\n);\n\nexport { <%= changeCase.pascal(entityName)%>CreateDialog };\n";

var generateCreateForm = function generateCreateForm(_ref) {
  var tablesList = _ref.tablesList,
      tableId = _ref.tableId,
      screenName = _ref.screenName;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      includeColumns = _ref2.includeColumns;

  var table = tablesList.find(function (_ref3) {
    var id = _ref3.id;
    return tableId === id;
  });

  if (!table) {
    throw new Error("Can't find a table with ".concat(tableId, " id"));
  }

  var tableName = table.displayName || table.name;
  var entityName = pluralize.singular(tableName);
  var fields = table.fields.filter(function (_ref4) {
    var isMeta = _ref4.isMeta,
        name = _ref4.name;
    return !isMeta && (0, _utils2.isFieldNeedsToInclude)(name, includeColumns);
  });
  var tableGenerated = ejs.render(createForm, {
    SchemaNameGenerator: _schemaNameGenerator.SchemaNameGenerator,
    changeCase: changeCase,
    chunks: _chunks.chunks,
    entityName: entityName,
    fields: fields,
    pluralize: pluralize,
    screenName: screenName || entityName,
    table: table,
    tableName: tableName,
    tableSelectors: _utils.tableSelectors
  });
  return (0, _formatCode.formatCode)(tableGenerated);
};

exports.generateCreateForm = generateCreateForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmF0ZUZpbGVzL2dlbmVyYXRlQ3JlYXRlRm9ybS9jcmVhdGVGb3JtLnRzIl0sIm5hbWVzIjpbImdlbmVyYXRlQ3JlYXRlRm9ybSIsInRhYmxlc0xpc3QiLCJ0YWJsZUlkIiwic2NyZWVuTmFtZSIsImluY2x1ZGVDb2x1bW5zIiwidGFibGUiLCJmaW5kIiwiaWQiLCJFcnJvciIsInRhYmxlTmFtZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsImVudGl0eU5hbWUiLCJwbHVyYWxpemUiLCJzaW5ndWxhciIsImZpZWxkcyIsImZpbHRlciIsImlzTWV0YSIsInRhYmxlR2VuZXJhdGVkIiwiZWpzIiwicmVuZGVyIiwiY3JlYXRlRm9ybSIsIlNjaGVtYU5hbWVHZW5lcmF0b3IiLCJjaGFuZ2VDYXNlIiwiY2h1bmtzIiwidGFibGVTZWxlY3RvcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7QUFFQTs7O0FBR08sSUFBTUEsa0JBQWtCLEdBQzdCLFNBRFdBLGtCQUNYLE9BQXFHO0FBQUEsTUFBbEdDLFVBQWtHLFFBQWxHQSxVQUFrRztBQUFBLE1BQXRGQyxPQUFzRixRQUF0RkEsT0FBc0Y7QUFBQSxNQUE3RUMsVUFBNkUsUUFBN0VBLFVBQTZFOztBQUFBLGtGQUFQLEVBQU87QUFBQSxNQUE1Q0MsY0FBNEMsU0FBNUNBLGNBQTRDOztBQUNuRyxNQUFNQyxLQUFLLEdBQUdKLFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQjtBQUFBLFFBQUdDLEVBQUgsU0FBR0EsRUFBSDtBQUFBLFdBQVlMLE9BQU8sS0FBS0ssRUFBeEI7QUFBQSxHQUFoQixDQUFkOztBQUVBLE1BQUksQ0FBQ0YsS0FBTCxFQUFZO0FBQUUsVUFBTSxJQUFJRyxLQUFKLG1DQUFxQ04sT0FBckMsU0FBTjtBQUEyRDs7QUFFekUsTUFBTU8sU0FBUyxHQUFHSixLQUFLLENBQUNLLFdBQU4sSUFBcUJMLEtBQUssQ0FBQ00sSUFBN0M7QUFFQSxNQUFNQyxVQUFVLEdBQUdDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkwsU0FBbkIsQ0FBbkI7QUFDQSxNQUFNTSxNQUFNLEdBQUdWLEtBQUssQ0FBQ1UsTUFBTixDQUFhQyxNQUFiLENBQW9CO0FBQUEsUUFBR0MsTUFBSCxTQUFHQSxNQUFIO0FBQUEsUUFBV04sSUFBWCxTQUFXQSxJQUFYO0FBQUEsV0FBc0IsQ0FBQ00sTUFBRCxJQUFXLG1DQUFzQk4sSUFBdEIsRUFBNEJQLGNBQTVCLENBQWpDO0FBQUEsR0FBcEIsQ0FBZjtBQUVBLE1BQU1jLGNBQWMsR0FBR0MsR0FBRyxDQUFDQyxNQUFKLENBQVdDLFVBQVgsRUFBdUI7QUFDNUNDLElBQUFBLG1CQUFtQixFQUFuQkEsd0NBRDRDO0FBRTVDQyxJQUFBQSxVQUFVLEVBQVZBLFVBRjRDO0FBRzVDQyxJQUFBQSxNQUFNLEVBQU5BLGNBSDRDO0FBSTVDWixJQUFBQSxVQUFVLEVBQVZBLFVBSjRDO0FBSzVDRyxJQUFBQSxNQUFNLEVBQU5BLE1BTDRDO0FBTTVDRixJQUFBQSxTQUFTLEVBQVRBLFNBTjRDO0FBTzVDVixJQUFBQSxVQUFVLEVBQUVBLFVBQVUsSUFBSVMsVUFQa0I7QUFRNUNQLElBQUFBLEtBQUssRUFBTEEsS0FSNEM7QUFTNUNJLElBQUFBLFNBQVMsRUFBVEEsU0FUNEM7QUFVNUNnQixJQUFBQSxjQUFjLEVBQWRBO0FBVjRDLEdBQXZCLENBQXZCO0FBYUEsU0FBTyw0QkFBV1AsY0FBWCxDQUFQO0FBQ0QsQ0F6QkkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWFOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQDhiYXNlL3NjaGVtYS1uYW1lLWdlbmVyYXRvcic7XG5pbXBvcnQgeyB0YWJsZVNlbGVjdG9ycyB9IGZyb20gJ0A4YmFzZS91dGlscyc7XG5pbXBvcnQgKiBhcyBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCAqIGFzIGVqcyBmcm9tICdlanMnO1xuaW1wb3J0ICogYXMgcGx1cmFsaXplIGZyb20gJ3BsdXJhbGl6ZSc7XG5pbXBvcnQgeyBmb3JtYXRDb2RlIH0gZnJvbSAnLi4vLi4vZm9ybWF0Q29kZSc7XG5pbXBvcnQgeyBHZW5lcmF0b3JzQ29uZmlnLCBJR2VuZXJhdG9yc0RhdGEgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBpc0ZpZWxkTmVlZHNUb0luY2x1ZGUgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBjaHVua3MgfSBmcm9tICcuLi9jaHVua3MnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgY3JlYXRlRm9ybSBmcm9tICcuL2NyZWF0ZUZvcm0uanMuZWpzJztcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlQ3JlYXRlRm9ybSA9XG4gICh7IHRhYmxlc0xpc3QsIHRhYmxlSWQsIHNjcmVlbk5hbWUgfTogSUdlbmVyYXRvcnNEYXRhLCB7IGluY2x1ZGVDb2x1bW5zIH06IEdlbmVyYXRvcnNDb25maWcgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHRhYmxlID0gdGFibGVzTGlzdC5maW5kKCh7IGlkIH0pID0+IHRhYmxlSWQgPT09IGlkKTtcblxuICAgIGlmICghdGFibGUpIHsgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBmaW5kIGEgdGFibGUgd2l0aCAke3RhYmxlSWR9IGlkYCk7IH1cblxuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHRhYmxlLmRpc3BsYXlOYW1lIHx8IHRhYmxlLm5hbWU7XG5cbiAgICBjb25zdCBlbnRpdHlOYW1lID0gcGx1cmFsaXplLnNpbmd1bGFyKHRhYmxlTmFtZSk7XG4gICAgY29uc3QgZmllbGRzID0gdGFibGUuZmllbGRzLmZpbHRlcigoeyBpc01ldGEsIG5hbWUgfSkgPT4gIWlzTWV0YSAmJiBpc0ZpZWxkTmVlZHNUb0luY2x1ZGUobmFtZSwgaW5jbHVkZUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHRhYmxlR2VuZXJhdGVkID0gZWpzLnJlbmRlcihjcmVhdGVGb3JtLCB7XG4gICAgICBTY2hlbWFOYW1lR2VuZXJhdG9yLFxuICAgICAgY2hhbmdlQ2FzZSxcbiAgICAgIGNodW5rcyxcbiAgICAgIGVudGl0eU5hbWUsXG4gICAgICBmaWVsZHMsXG4gICAgICBwbHVyYWxpemUsXG4gICAgICBzY3JlZW5OYW1lOiBzY3JlZW5OYW1lIHx8IGVudGl0eU5hbWUsXG4gICAgICB0YWJsZSxcbiAgICAgIHRhYmxlTmFtZSxcbiAgICAgIHRhYmxlU2VsZWN0b3JzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvcm1hdENvZGUodGFibGVHZW5lcmF0ZWQpO1xuICB9O1xuIl19