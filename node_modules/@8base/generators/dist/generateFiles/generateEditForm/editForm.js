"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateEditForm = void 0;

var _schemaNameGenerator = require("@8base/schema-name-generator");

var _utils = require("@8base/utils");

var changeCase = _interopRequireWildcard(require("change-case"));

var ejs = _interopRequireWildcard(require("ejs"));

var pluralize = _interopRequireWildcard(require("pluralize"));

var _formatCode = require("../../formatCode");

var _utils2 = require("../../utils");

var _chunks = require("../chunks");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

/* babel-plugin-inline-import './editForm.js.ejs' */
// @ts-ignore
var editForm = "import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query, graphql } from 'react-apollo';\nimport { Form as FormLogic, Field, FieldArray } from '@8base/forms';\nimport {\n  AsyncContent,\n  Dialog,\n  Grid,\n  Button,\n  Form,\n  Row,\n  Column,\n  Icon,\n  Text,\n  SelectField,\n  InputField,\n  CheckboxField,\n  DateInputField,\n  Label,\n  ModalContext,\n} from '@8base/boost';\nimport { AddressInputField, PhoneInputField, ListFields, FileInputField } from '../../shared/components'\n\nconst <%= changeCase.upper(entityName)%>_QUERY = gql`\n  <%= queryEntityText%> \n`;\n\nconst <%= changeCase.upper(entityName)%>_UPDATE_MUTATION = gql`\n  mutation <%= changeCase.pascal(entityName)%>Update($data: <%= SchemaNameGenerator.getUpdateInputName(tableName)%>!) {\n    <%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>(data: $data) {\n      id\n    }\n  }\n`;\n\n<%- chunks.createEditComponents({\n    fields: fields,\n    SchemaNameGenerator: SchemaNameGenerator,\n    changeCase: changeCase,\n    chunks: chunks,\n    tableSelectors: tableSelectors,\n    table: table,\n}); %>\n\nconst ehnhancer = graphql(<%= changeCase.upper(entityName)%>_UPDATE_MUTATION, {\n  name: '<%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>',\n  options: {\n    refetchQueries: ['<%=changeCase.pascal(tableName)%>TableContent', '<%= changeCase.pascal(SchemaNameGenerator.getTableListFieldName(tableName))%>'],\n    context: {\n      TOAST_SUCCESS_MESSAGE: '<%= changeCase.pascal(entityName)%> successfully updated',\n    },\n  },\n});\n\nconst <%= changeCase.pascal(entityName)%>EditDialog = ehnhancer(\n  class <%= changeCase.pascal(entityName)%>EditDialog extends React.PureComponent {\n    static contextType = ModalContext;\n\n    updateOnSubmit = id => async data => {\n      await this.props.<%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>({ variables: { data: { ...data, id } } });\n\n      this.context.closeModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID');\n    };\n\n    onClose = () => {\n      this.context.closeModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID');\n    };\n\n    renderForm = ({ args }) => {\n      return (\n        <Query query={<%= changeCase.upper(entityName)%>_QUERY} variables={{ id: args.id }}>\n          {({ data, loading }) => (\n          <FormLogic\n            type=\"UPDATE\"\n            tableSchemaName=\"<%= tableName%>\"\n            onSubmit={this.updateOnSubmit(args.id)}\n            initialValues={data.<%= changeCase.lower(entityName) %>}\n            formatRelationToIds\n          >\n            {({ handleSubmit, invalid, submitting, pristine }) => (\n              <form onSubmit={handleSubmit}>\n                <Dialog.Header title=\"Edit <%= changeCase.pascal(entityName)%>\" onClose={this.onClose} />\n                <Dialog.Body scrollable>\n                  <AsyncContent loading={ loading } stretch>\n                    <Grid.Layout gap=\"md\" stretch>\n                      <%-\n                            chunks.fieldsInputsList({ \n                              fields: fields,\n                              chunks: chunks,\n                              changeCase: changeCase,\n                              pluralize: pluralize,\n                              SchemaNameGenerator: SchemaNameGenerator,\n                            }); %>\n                    </Grid.Layout>\n                  </AsyncContent>\n                </Dialog.Body>\n                <Dialog.Footer>\n                  <Button color=\"neutral\" type=\"button\" variant=\"outlined\" disabled={submitting} onClick={this.onClose}>\n                    Cancel\n                  </Button>\n                  <Button color=\"primary\" type=\"submit\" disabled={pristine || invalid} loading={submitting}>\n                    Update\n                    <%= changeCase.pascal(entityName)%>\n                  </Button>\n                </Dialog.Footer>\n              </form>\n              )}\n          </FormLogic>\n        )}\n        </Query>\n      );\n    };\n\n    render() {\n      return (\n        <Dialog id={'<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID'} size=\"sm\">\n          {this.renderForm}\n        </Dialog>\n      );\n    }\n  }\n);\n\nexport { <%= changeCase.pascal(entityName)%>EditDialog };\n";

var generateEditForm = function generateEditForm(_ref) {
  var tablesList = _ref.tablesList,
      tableId = _ref.tableId,
      screenName = _ref.screenName;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      includeColumns = _ref2.includeColumns;

  var table = tablesList.find(function (_ref3) {
    var id = _ref3.id;
    return tableId === id;
  });

  if (!table) {
    throw new Error("Can't find a table with ".concat(tableId, " id"));
  }

  var tableName = table.displayName || table.name;
  var entityName = pluralize.singular(screenName || tableName);
  var mutationText = (0, _utils.createTableRowUpdateTag)(tablesList, tableId);
  var queryEntityText = (0, _utils.createTableRowQueryTag)(tablesList, tableId, {
    withMeta: false
  });
  var fields = table.fields.filter(function (_ref4) {
    var isMeta = _ref4.isMeta,
        name = _ref4.name;
    return !isMeta && (0, _utils2.isFieldNeedsToInclude)(name, includeColumns);
  });
  var tableGenerated = ejs.render(editForm, {
    SchemaNameGenerator: _schemaNameGenerator.SchemaNameGenerator,
    changeCase: changeCase,
    chunks: _chunks.chunks,
    entityName: entityName,
    fields: fields,
    mutationText: mutationText,
    pluralize: pluralize,
    queryEntityText: queryEntityText,
    screenName: screenName || tableName,
    table: table,
    tableName: tableName,
    tableSelectors: _utils.tableSelectors
  });
  return (0, _formatCode.formatCode)(tableGenerated);
};

exports.generateEditForm = generateEditForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmF0ZUZpbGVzL2dlbmVyYXRlRWRpdEZvcm0vZWRpdEZvcm0udHMiXSwibmFtZXMiOlsiZ2VuZXJhdGVFZGl0Rm9ybSIsInRhYmxlc0xpc3QiLCJ0YWJsZUlkIiwic2NyZWVuTmFtZSIsImluY2x1ZGVDb2x1bW5zIiwidGFibGUiLCJmaW5kIiwiaWQiLCJFcnJvciIsInRhYmxlTmFtZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsImVudGl0eU5hbWUiLCJwbHVyYWxpemUiLCJzaW5ndWxhciIsIm11dGF0aW9uVGV4dCIsInF1ZXJ5RW50aXR5VGV4dCIsIndpdGhNZXRhIiwiZmllbGRzIiwiZmlsdGVyIiwiaXNNZXRhIiwidGFibGVHZW5lcmF0ZWQiLCJlanMiLCJyZW5kZXIiLCJlZGl0Rm9ybSIsIlNjaGVtYU5hbWVHZW5lcmF0b3IiLCJjaGFuZ2VDYXNlIiwiY2h1bmtzIiwidGFibGVTZWxlY3RvcnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7QUFFQTs7O0FBR08sSUFBTUEsZ0JBQWdCLEdBQzNCLFNBRFdBLGdCQUNYLE9BQXFHO0FBQUEsTUFBbEdDLFVBQWtHLFFBQWxHQSxVQUFrRztBQUFBLE1BQXRGQyxPQUFzRixRQUF0RkEsT0FBc0Y7QUFBQSxNQUE3RUMsVUFBNkUsUUFBN0VBLFVBQTZFOztBQUFBLGtGQUFQLEVBQU87QUFBQSxNQUE1Q0MsY0FBNEMsU0FBNUNBLGNBQTRDOztBQUNuRyxNQUFNQyxLQUFLLEdBQUdKLFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQjtBQUFBLFFBQUdDLEVBQUgsU0FBR0EsRUFBSDtBQUFBLFdBQVlMLE9BQU8sS0FBS0ssRUFBeEI7QUFBQSxHQUFoQixDQUFkOztBQUVBLE1BQUksQ0FBQ0YsS0FBTCxFQUFZO0FBQUUsVUFBTSxJQUFJRyxLQUFKLG1DQUFxQ04sT0FBckMsU0FBTjtBQUEyRDs7QUFFekUsTUFBTU8sU0FBUyxHQUFHSixLQUFLLENBQUNLLFdBQU4sSUFBcUJMLEtBQUssQ0FBQ00sSUFBN0M7QUFFQSxNQUFNQyxVQUFVLEdBQUdDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQlgsVUFBVSxJQUFJTSxTQUFqQyxDQUFuQjtBQUNBLE1BQU1NLFlBQVksR0FBRyxvQ0FBd0JkLFVBQXhCLEVBQW9DQyxPQUFwQyxDQUFyQjtBQUNBLE1BQU1jLGVBQWUsR0FBRyxtQ0FBdUJmLFVBQXZCLEVBQW1DQyxPQUFuQyxFQUE0QztBQUFFZSxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUE1QyxDQUF4QjtBQUNBLE1BQU1DLE1BQU0sR0FBR2IsS0FBSyxDQUFDYSxNQUFOLENBQWFDLE1BQWIsQ0FBb0I7QUFBQSxRQUFHQyxNQUFILFNBQUdBLE1BQUg7QUFBQSxRQUFXVCxJQUFYLFNBQVdBLElBQVg7QUFBQSxXQUFzQixDQUFDUyxNQUFELElBQVcsbUNBQXNCVCxJQUF0QixFQUE0QlAsY0FBNUIsQ0FBakM7QUFBQSxHQUFwQixDQUFmO0FBRUEsTUFBTWlCLGNBQWMsR0FBR0MsR0FBRyxDQUFDQyxNQUFKLENBQVdDLFFBQVgsRUFBcUI7QUFDMUNDLElBQUFBLG1CQUFtQixFQUFuQkEsd0NBRDBDO0FBRTFDQyxJQUFBQSxVQUFVLEVBQVZBLFVBRjBDO0FBRzFDQyxJQUFBQSxNQUFNLEVBQU5BLGNBSDBDO0FBSTFDZixJQUFBQSxVQUFVLEVBQVZBLFVBSjBDO0FBSzFDTSxJQUFBQSxNQUFNLEVBQU5BLE1BTDBDO0FBTTFDSCxJQUFBQSxZQUFZLEVBQVpBLFlBTjBDO0FBTzFDRixJQUFBQSxTQUFTLEVBQVRBLFNBUDBDO0FBUTFDRyxJQUFBQSxlQUFlLEVBQWZBLGVBUjBDO0FBUzFDYixJQUFBQSxVQUFVLEVBQUVBLFVBQVUsSUFBSU0sU0FUZ0I7QUFVMUNKLElBQUFBLEtBQUssRUFBTEEsS0FWMEM7QUFXMUNJLElBQUFBLFNBQVMsRUFBVEEsU0FYMEM7QUFZMUNtQixJQUFBQSxjQUFjLEVBQWRBO0FBWjBDLEdBQXJCLENBQXZCO0FBZUEsU0FBTyw0QkFBV1AsY0FBWCxDQUFQO0FBQ0QsQ0E3QkkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWFOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQDhiYXNlL3NjaGVtYS1uYW1lLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBjcmVhdGVUYWJsZVJvd1F1ZXJ5VGFnLCBjcmVhdGVUYWJsZVJvd1VwZGF0ZVRhZyAsIHRhYmxlU2VsZWN0b3JzIH0gZnJvbSAnQDhiYXNlL3V0aWxzJztcbmltcG9ydCAqIGFzIGNoYW5nZUNhc2UgZnJvbSAnY2hhbmdlLWNhc2UnO1xuaW1wb3J0ICogYXMgZWpzIGZyb20gJ2Vqcyc7XG5pbXBvcnQgKiBhcyBwbHVyYWxpemUgZnJvbSAncGx1cmFsaXplJztcbmltcG9ydCB7IGZvcm1hdENvZGUgfSBmcm9tICcuLi8uLi9mb3JtYXRDb2RlJztcbmltcG9ydCB7IEdlbmVyYXRvcnNDb25maWcsIElHZW5lcmF0b3JzRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IGlzRmllbGROZWVkc1RvSW5jbHVkZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IGNodW5rcyB9IGZyb20gJy4uL2NodW5rcyc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBlZGl0Rm9ybSBmcm9tICcuL2VkaXRGb3JtLmpzLmVqcyc7XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUVkaXRGb3JtID1cbiAgKHsgdGFibGVzTGlzdCwgdGFibGVJZCwgc2NyZWVuTmFtZSB9OiBJR2VuZXJhdG9yc0RhdGEsIHsgaW5jbHVkZUNvbHVtbnMgfTogR2VuZXJhdG9yc0NvbmZpZyA9IHt9KSA9PiB7XG4gICAgY29uc3QgdGFibGUgPSB0YWJsZXNMaXN0LmZpbmQoKHsgaWQgfSkgPT4gdGFibGVJZCA9PT0gaWQpO1xuXG4gICAgaWYgKCF0YWJsZSkgeyB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGZpbmQgYSB0YWJsZSB3aXRoICR7dGFibGVJZH0gaWRgKTsgfVxuXG4gICAgY29uc3QgdGFibGVOYW1lID0gdGFibGUuZGlzcGxheU5hbWUgfHwgdGFibGUubmFtZTtcblxuICAgIGNvbnN0IGVudGl0eU5hbWUgPSBwbHVyYWxpemUuc2luZ3VsYXIoc2NyZWVuTmFtZSB8fCB0YWJsZU5hbWUpO1xuICAgIGNvbnN0IG11dGF0aW9uVGV4dCA9IGNyZWF0ZVRhYmxlUm93VXBkYXRlVGFnKHRhYmxlc0xpc3QsIHRhYmxlSWQpO1xuICAgIGNvbnN0IHF1ZXJ5RW50aXR5VGV4dCA9IGNyZWF0ZVRhYmxlUm93UXVlcnlUYWcodGFibGVzTGlzdCwgdGFibGVJZCwgeyB3aXRoTWV0YTogZmFsc2UgfSk7XG4gICAgY29uc3QgZmllbGRzID0gdGFibGUuZmllbGRzLmZpbHRlcigoeyBpc01ldGEsIG5hbWUgfSkgPT4gIWlzTWV0YSAmJiBpc0ZpZWxkTmVlZHNUb0luY2x1ZGUobmFtZSwgaW5jbHVkZUNvbHVtbnMpKTtcblxuICAgIGNvbnN0IHRhYmxlR2VuZXJhdGVkID0gZWpzLnJlbmRlcihlZGl0Rm9ybSwge1xuICAgICAgU2NoZW1hTmFtZUdlbmVyYXRvcixcbiAgICAgIGNoYW5nZUNhc2UsXG4gICAgICBjaHVua3MsXG4gICAgICBlbnRpdHlOYW1lLFxuICAgICAgZmllbGRzLFxuICAgICAgbXV0YXRpb25UZXh0LFxuICAgICAgcGx1cmFsaXplLFxuICAgICAgcXVlcnlFbnRpdHlUZXh0LFxuICAgICAgc2NyZWVuTmFtZTogc2NyZWVuTmFtZSB8fCB0YWJsZU5hbWUsXG4gICAgICB0YWJsZSxcbiAgICAgIHRhYmxlTmFtZSxcbiAgICAgIHRhYmxlU2VsZWN0b3JzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvcm1hdENvZGUodGFibGVHZW5lcmF0ZWQpO1xuICB9O1xuIl19