"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateTable = void 0;

var _schemaNameGenerator = require("@8base/schema-name-generator");

var _utils = require("@8base/utils");

var changeCase = _interopRequireWildcard(require("change-case"));

var ejs = _interopRequireWildcard(require("ejs"));

var pluralize = _interopRequireWildcard(require("pluralize"));

var _formatCode = require("../../formatCode");

var _chunks = require("../chunks");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

/* babel-plugin-inline-import './table.js.ejs' */
// @ts-ignore
var tableTemplate = "import React from 'react';\nimport gql from 'graphql-tag';\nimport objectPath from 'object-path';\nimport { graphql, compose } from 'react-apollo';\nimport { DateTime } from 'luxon';\nimport { TableBuilder, Dropdown, Icon, Menu, Link, Tag, Row, withModal } from '@8base/boost';\nimport { FIELD_TYPE, SMART_FORMATS, FILE_FORMATS, DATE_FORMATS, SWITCH_FORMATS, SWITCH_VALUES } from '@8base/utils';\n\nconst <%= changeCase.upper(screenName)%>_LIST_QUERY = gql`\n<%= queryText%>\n`;\n\nconst TABLE_COLUMNS = [<% \ncolumns.forEach((column) => { %>\n  {\n    name: '<%= column.name%>',\n    title: '<%= column.title%>',\n    meta: {\n      isList: <%= column.meta.isList%>,\n      fieldType: FIELD_TYPE.<%= column.meta.fieldType%>,\n      fieldTypeAttributes: {\n        format: '<%= column.meta.fieldTypeAttributes && column.meta.fieldTypeAttributes.format%>',\n      },\n    },\n  },<%\n}); %>\n  {\n    name: 'edit',\n    title: '',\n    width: '60px',\n  },\n];\n\nconst enhancer = compose(\n  withModal,\n  graphql(<%= changeCase.upper(screenName)%>_LIST_QUERY, { name: '<%= changeCase.lower(tableName)%>' })\n);\n\nconst <%= changeCase.pascal(screenName)%>Table = enhancer(\n  class <%= changeCase.pascal(screenName)%>Table extends React.PureComponent {\n    renderEdit = rowData => (\n      <Dropdown defaultOpen={false}>\n        <Dropdown.Head>\n          <Icon name=\"More\" size=\"sm\" color=\"LIGHT_GRAY2\" />\n        </Dropdown.Head>\n        <Dropdown.Body pin=\"right\">\n          {({ closeDropdown }) => (\n            <Menu>\n              <Menu.Item\n                onClick={() => {\n                  this.props.openModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID', { id: rowData.id });\n                  closeDropdown();\n                }}\n              >\n                Edit\n              </Menu.Item>\n              <Menu.Item\n                onClick={() => {\n                  this.props.openModal('<%= changeCase.upper(entityName)%>_DELETE_DIALOG_ID', { id: rowData.id });\n                  closeDropdown();\n                }}\n              >\n                Delete\n              </Menu.Item>\n            </Menu>\n          )}\n        </Dropdown.Body>\n      </Dropdown>\n    );\n\n    renderItems = (column, rowData, handler) => {\n      const dataPath = column.name.split('.');\n      const cellData = objectPath.get(rowData, dataPath) || '';\n\n      if (column.meta.isList) {\n        const itemsArray = cellData.items ? cellData.items : cellData;\n\n        return (\n          <Row style={{ flexWrap: 'wrap' }}>\n            {itemsArray && itemsArray.map(item => !!item && <Tag color=\"LIGHT_GRAY2\">{handler(item)}</Tag>)}\n          </Row>\n        );\n      } else {\n        return cellData && <div>{handler(cellData)}</div>;\n      }\n    };\n\n    <% if(tableSelectors.hasScalarFields(table)) {%>\n      renderScalar = (column, rowData) => {\n        return this.renderItems(column, rowData, item => item);\n      };\n    <% }; %>\n\n    <% if(tableSelectors.hasDateFields(table)) {%>\n      renderDate = (column, rowData) => {\n        const dateFormat =\n          column.meta.fieldTypeAttributes.format === DATE_FORMATS.DATE ? DateTime.DATE_SHORT : DateTime.DATETIME_SHORT;\n\n        return this.renderItems(column, rowData, item => DateTime.fromISO(item).toLocaleString(dateFormat));\n      };\n    <% }; %>\n\n    <% if(tableSelectors.hasSwitchFields(table)) {%>\n      renderSwitch = (column, rowData) => {\n        if (column.meta.fieldTypeAttributes.format === SWITCH_FORMATS.CUSTOM) {\n          return this.renderItems(column, rowData, item => item);\n        } else {\n          return this.renderItems(column, rowData, item => SWITCH_VALUES[column.meta.fieldTypeAttributes.format][item]);\n        }\n      };\n    <% }; %>\n\n    <% if(tableSelectors.hasRelationFields(table)) {%>\n      renderRelation = (column, rowData) => {\n        const dataPath = column.name.split('.');\n\n        if (column.meta.isList) {\n          return objectPath.get(rowData, [...dataPath, 'count']) || '';\n        } else {\n          return objectPath.get(rowData, [...dataPath, '_description']) || '';\n        }\n      };\n    <% }; %>\n\n    <% if(tableSelectors.hasFileFields(table)) {%>\n      renderFile = (column, rowData) => {\n        if (column.meta.fieldTypeAttributes.format === FILE_FORMATS.IMAGE && !column.meta.isList) {\n          const cellData = objectPath.get(rowData, column.name.split('.'));\n\n          return cellData && <img src={cellData.downloadUrl} alt=\"filename\" style={{ width: '5rem' }} />;\n        } else {\n          return this.renderItems(column, rowData, item => (\n            <div>\n              <Link key={item.downloadUrl} target=\"_blank\" href={item.downloadUrl} size=\"sm\">\n                {item.filename}\n              </Link>\n            </div>\n          ));\n        }\n      };\n    <% }; %>\n\n    <% if(tableSelectors.hasSmartFields(table)) {%>\n      renderSmart = (column, rowData) => {\n        return this.renderItems(column, rowData, item => {\n          if (column.meta.fieldTypeAttributes.format === SMART_FORMATS.ADDRESS) {\n            const address = [item.street1, item.street2, item.city, item.state, item.zip].filter(item => !!item);\n\n            return join(', ', address);\n          } else if (column.meta.fieldTypeAttributes.format === SMART_FORMATS.PHONE) {\n            const phone = [item.code, item.number].filter(item => !!item);\n\n            return join(' ', phone);\n          }\n        });\n      };\n    <% }; %>\n\n    renderCell = (column, rowData) => {\n      if (column.name === 'edit') {\n        return this.renderEdit(rowData);\n      }\n\n      switch (column.meta.fieldType) {\n        <% if(tableSelectors.hasScalarFields(table)) {%>\n          case FIELD_TYPE.TEXT:\n          case FIELD_TYPE.NUMBER:\n            return this.renderScalar(column, rowData);\n        <% }; %>\n        <% if(tableSelectors.hasDateFields(table)) {%>\n          case FIELD_TYPE.DATE:\n            return this.renderDate(column, rowData);\n        <% }; %>\n        <% if(tableSelectors.hasSwitchFields(table)) {%>\n          case FIELD_TYPE.SWITCH:\n            return this.renderSwitch(column, rowData);\n        <% }; %>\n        <% if(tableSelectors.hasFileFields(table)) {%>\n          case FIELD_TYPE.FILE:\n            return this.renderFile(column, rowData);\n        <% }; %>\n        <% if(tableSelectors.hasRelationFields(table)) {%>\n          case FIELD_TYPE.RELATION:\n            return this.renderRelation(column, rowData);\n        <% }; %>\n        <% if(tableSelectors.hasSmartFields(table)) {%>\n          case FIELD_TYPE.SMART:\n            return this.renderSmart(column, rowData);\n        <% }; %>\n          default:\n            return null;\n      }\n    };\n\n    openCreateModal = () => {\n      const { openModal } = this.props;\n\n      openModal('<%= changeCase.upper(entityName)%>_CREATE_DIALOG_ID');\n    };\n\n    render() {\n      const { <%= changeCase.lower(tableName)%> } = this.props;\n      const tableData = objectPath.get(<%= changeCase.lower(tableName)%>, ['<%= SchemaNameGenerator.getTableListFieldName(tableName)%>', 'items']) || [];\n\n      return (\n        <TableBuilder\n          loading={<%= changeCase.lower(tableName)%>.loading}\n          data={tableData}\n          columns={TABLE_COLUMNS}\n          action=\"Create <%= changeCase.pascal(entityName)%>\"\n          renderCell={this.renderCell}\n          onActionClick={this.openCreateModal}\n        />\n      );\n    }\n  }\n);\n\nexport { <%= changeCase.pascal(screenName)%>Table };\n";

var generateTable = function generateTable(_ref, config) {
  var tablesList = _ref.tablesList,
      tableId = _ref.tableId,
      screenName = _ref.screenName;
  var table = tablesList.find(function (_ref2) {
    var id = _ref2.id;
    return tableId === id;
  });

  if (!table) {
    throw new Error("Can't find a table with ".concat(tableId, " id"));
  }

  var tableName = table.displayName || table.name;
  var entityName = pluralize.singular(screenName || tableName);
  var queryText = (0, _utils.createTableFilterGraphqlTag)(tablesList, tableId, config);
  var columns = (0, _utils.createQueryColumnsList)(tablesList, tableId, config);
  var tableGenerated = ejs.render(tableTemplate, {
    SchemaNameGenerator: _schemaNameGenerator.SchemaNameGenerator,
    changeCase: changeCase,
    chunks: _chunks.chunks,
    columns: columns,
    entityName: entityName,
    pluralize: pluralize,
    queryText: queryText,
    screenName: screenName || tableName,
    table: table,
    tableName: tableName,
    tableSelectors: _utils.tableSelectors
  });
  return (0, _formatCode.formatCode)(tableGenerated);
};

exports.generateTable = generateTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nZW5lcmF0ZUZpbGVzL2dlbmVyYXRlVGFibGUvdGFibGUudHMiXSwibmFtZXMiOlsiZ2VuZXJhdGVUYWJsZSIsImNvbmZpZyIsInRhYmxlc0xpc3QiLCJ0YWJsZUlkIiwic2NyZWVuTmFtZSIsInRhYmxlIiwiZmluZCIsImlkIiwiRXJyb3IiLCJ0YWJsZU5hbWUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJlbnRpdHlOYW1lIiwicGx1cmFsaXplIiwic2luZ3VsYXIiLCJxdWVyeVRleHQiLCJjb2x1bW5zIiwidGFibGVHZW5lcmF0ZWQiLCJlanMiLCJyZW5kZXIiLCJ0YWJsZVRlbXBsYXRlIiwiU2NoZW1hTmFtZUdlbmVyYXRvciIsImNoYW5nZUNhc2UiLCJjaHVua3MiLCJ0YWJsZVNlbGVjdG9ycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7OztBQUVBOzs7QUFHTyxJQUFNQSxhQUFhLEdBQ3hCLFNBRFdBLGFBQ1gsT0FBdURDLE1BQXZELEVBQW9GO0FBQUEsTUFBakZDLFVBQWlGLFFBQWpGQSxVQUFpRjtBQUFBLE1BQXJFQyxPQUFxRSxRQUFyRUEsT0FBcUU7QUFBQSxNQUE1REMsVUFBNEQsUUFBNURBLFVBQTREO0FBQ2xGLE1BQU1DLEtBQUssR0FBR0gsVUFBVSxDQUFDSSxJQUFYLENBQWdCO0FBQUEsUUFBR0MsRUFBSCxTQUFHQSxFQUFIO0FBQUEsV0FBWUosT0FBTyxLQUFLSSxFQUF4QjtBQUFBLEdBQWhCLENBQWQ7O0FBRUEsTUFBSSxDQUFDRixLQUFMLEVBQVk7QUFBRSxVQUFNLElBQUlHLEtBQUosbUNBQXFDTCxPQUFyQyxTQUFOO0FBQTJEOztBQUV6RSxNQUFNTSxTQUFTLEdBQUdKLEtBQUssQ0FBQ0ssV0FBTixJQUFxQkwsS0FBSyxDQUFDTSxJQUE3QztBQUVBLE1BQU1DLFVBQVUsR0FBR0MsU0FBUyxDQUFDQyxRQUFWLENBQW1CVixVQUFVLElBQUlLLFNBQWpDLENBQW5CO0FBQ0EsTUFBTU0sU0FBUyxHQUFHLHdDQUE0QmIsVUFBNUIsRUFBd0NDLE9BQXhDLEVBQWlERixNQUFqRCxDQUFsQjtBQUNBLE1BQU1lLE9BQU8sR0FBRyxtQ0FBdUJkLFVBQXZCLEVBQW1DQyxPQUFuQyxFQUE0Q0YsTUFBNUMsQ0FBaEI7QUFFQSxNQUFNZ0IsY0FBYyxHQUFHQyxHQUFHLENBQUNDLE1BQUosQ0FBV0MsYUFBWCxFQUEwQjtBQUMvQ0MsSUFBQUEsbUJBQW1CLEVBQW5CQSx3Q0FEK0M7QUFFL0NDLElBQUFBLFVBQVUsRUFBVkEsVUFGK0M7QUFHL0NDLElBQUFBLE1BQU0sRUFBTkEsY0FIK0M7QUFJL0NQLElBQUFBLE9BQU8sRUFBUEEsT0FKK0M7QUFLL0NKLElBQUFBLFVBQVUsRUFBVkEsVUFMK0M7QUFNL0NDLElBQUFBLFNBQVMsRUFBVEEsU0FOK0M7QUFPL0NFLElBQUFBLFNBQVMsRUFBVEEsU0FQK0M7QUFRL0NYLElBQUFBLFVBQVUsRUFBRUEsVUFBVSxJQUFJSyxTQVJxQjtBQVMvQ0osSUFBQUEsS0FBSyxFQUFMQSxLQVQrQztBQVUvQ0ksSUFBQUEsU0FBUyxFQUFUQSxTQVYrQztBQVcvQ2UsSUFBQUEsY0FBYyxFQUFkQTtBQVgrQyxHQUExQixDQUF2QjtBQWNBLFNBQU8sNEJBQVdQLGNBQVgsQ0FBUDtBQUNELENBM0JJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hTmFtZUdlbmVyYXRvciB9IGZyb20gJ0A4YmFzZS9zY2hlbWEtbmFtZS1nZW5lcmF0b3InO1xuaW1wb3J0IHsgY3JlYXRlUXVlcnlDb2x1bW5zTGlzdCwgY3JlYXRlVGFibGVGaWx0ZXJHcmFwaHFsVGFnLCB0YWJsZVNlbGVjdG9ycyB9IGZyb20gJ0A4YmFzZS91dGlscyc7XG5pbXBvcnQgKiBhcyBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCAqIGFzIGVqcyBmcm9tICdlanMnO1xuaW1wb3J0ICogYXMgcGx1cmFsaXplIGZyb20gJ3BsdXJhbGl6ZSc7XG5pbXBvcnQgeyBmb3JtYXRDb2RlIH0gZnJvbSAnLi4vLi4vZm9ybWF0Q29kZSc7XG5pbXBvcnQgeyBHZW5lcmF0b3JzQ29uZmlnLCBJR2VuZXJhdG9yc0RhdGEgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBjaHVua3MgfSBmcm9tICcuLi9jaHVua3MnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdGFibGVUZW1wbGF0ZSBmcm9tICcuL3RhYmxlLmpzLmVqcyc7XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVRhYmxlID1cbiAgKHsgdGFibGVzTGlzdCwgdGFibGVJZCwgc2NyZWVuTmFtZSB9OiBJR2VuZXJhdG9yc0RhdGEsIGNvbmZpZzogR2VuZXJhdG9yc0NvbmZpZykgPT4ge1xuICAgIGNvbnN0IHRhYmxlID0gdGFibGVzTGlzdC5maW5kKCh7IGlkIH0pID0+IHRhYmxlSWQgPT09IGlkKTtcblxuICAgIGlmICghdGFibGUpIHsgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBmaW5kIGEgdGFibGUgd2l0aCAke3RhYmxlSWR9IGlkYCk7IH1cblxuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHRhYmxlLmRpc3BsYXlOYW1lIHx8IHRhYmxlLm5hbWU7XG5cbiAgICBjb25zdCBlbnRpdHlOYW1lID0gcGx1cmFsaXplLnNpbmd1bGFyKHNjcmVlbk5hbWUgfHwgdGFibGVOYW1lKTtcbiAgICBjb25zdCBxdWVyeVRleHQgPSBjcmVhdGVUYWJsZUZpbHRlckdyYXBocWxUYWcodGFibGVzTGlzdCwgdGFibGVJZCwgY29uZmlnKTtcbiAgICBjb25zdCBjb2x1bW5zID0gY3JlYXRlUXVlcnlDb2x1bW5zTGlzdCh0YWJsZXNMaXN0LCB0YWJsZUlkLCBjb25maWcpO1xuXG4gICAgY29uc3QgdGFibGVHZW5lcmF0ZWQgPSBlanMucmVuZGVyKHRhYmxlVGVtcGxhdGUsIHtcbiAgICAgIFNjaGVtYU5hbWVHZW5lcmF0b3IsXG4gICAgICBjaGFuZ2VDYXNlLFxuICAgICAgY2h1bmtzLFxuICAgICAgY29sdW1ucyxcbiAgICAgIGVudGl0eU5hbWUsXG4gICAgICBwbHVyYWxpemUsXG4gICAgICBxdWVyeVRleHQsXG4gICAgICBzY3JlZW5OYW1lOiBzY3JlZW5OYW1lIHx8IHRhYmxlTmFtZSxcbiAgICAgIHRhYmxlLFxuICAgICAgdGFibGVOYW1lLFxuICAgICAgdGFibGVTZWxlY3RvcnMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm9ybWF0Q29kZSh0YWJsZUdlbmVyYXRlZCk7XG4gIH07XG4iXX0=