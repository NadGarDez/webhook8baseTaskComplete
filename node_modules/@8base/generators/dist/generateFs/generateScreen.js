"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateScreen = void 0;

var changeCase = _interopRequireWildcard(require("change-case"));

var os = _interopRequireWildcard(require("os"));

var pluralize = _interopRequireWildcard(require("pluralize"));

var _formatCode = require("../formatCode");

var _chunks = require("../generateFiles/chunks");

var _createForm = require("../generateFiles/generateCreateForm/createForm");

var _deleteForm = require("../generateFiles/generateDeleteForm/deleteForm");

var _editForm = require("../generateFiles/generateEditForm/editForm");

var _generateIndex = require("../generateFiles/generateIndex");

var _table = require("../generateFiles/generateTable/table");

var _generateFileNames = require("./generateFileNames");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PAGE_CONSTANTS = {
  APP_PAGES_IMPORTS: '/** __APP_PAGES_IMPORTS__ */',
  APP_ROUTES: '{/** __APP_ROUTES__ */}',
  APP_ROUTE_LINKS: '{/** __APP_ROUTE_LINKS__ */}'
};

var generateScreen = function generateScreen(_ref, config) {
  var tablesList = _ref.tablesList,
      screen = _ref.screen,
      rootFile = _ref.rootFile;
  var fs = {};
  var screenName = screen.screenName,
      tableId = screen.tableId,
      tableFields = screen.tableFields,
      formFields = screen.formFields;
  var generatorData = {
    tablesList: tablesList,
    tableId: tableId,
    screenName: screenName
  };
  var routeUrl = "/".concat(changeCase.camel(screenName));
  var entityName = pluralize.singular(screenName);
  fs["src/routes/".concat((0, _generateFileNames.getScreenFolderName)(screenName), "/").concat((0, _generateFileNames.getCreateFormFileName)(entityName))] = (0, _createForm.generateCreateForm)(generatorData, _objectSpread({}, config, {
    includeColumns: formFields
  }));
  fs["src/routes/".concat((0, _generateFileNames.getScreenFolderName)(screenName), "/").concat((0, _generateFileNames.getEditFormFileName)(entityName))] = (0, _editForm.generateEditForm)(generatorData, _objectSpread({}, config, {
    includeColumns: formFields
  }));
  fs["src/routes/".concat((0, _generateFileNames.getScreenFolderName)(screenName), "/").concat((0, _generateFileNames.getDeleteFormFileName)(entityName))] = (0, _deleteForm.generateDeleteForm)(generatorData);
  fs["src/routes/".concat((0, _generateFileNames.getScreenFolderName)(screenName), "/").concat((0, _generateFileNames.getTableFileName)(screenName))] = (0, _table.generateTable)(generatorData, _objectSpread({}, config, {
    includeColumns: tableFields
  }));
  fs["src/routes/".concat((0, _generateFileNames.getScreenFolderName)(screenName), "/index.js")] = (0, _generateIndex.generateIndex)(generatorData);

  if (typeof rootFile === 'string') {
    fs['src/Root.js'] = (0, _formatCode.formatCode)(rootFile.replace("".concat(PAGE_CONSTANTS.APP_PAGES_IMPORTS), "".concat(PAGE_CONSTANTS.APP_PAGES_IMPORTS).concat(os.EOL).concat(_chunks.chunks.routeImport({
      screenName: screenName,
      changeCase: changeCase
    }))).replace("".concat(PAGE_CONSTANTS.APP_ROUTE_LINKS), "".concat(PAGE_CONSTANTS.APP_ROUTE_LINKS).concat(os.EOL).concat(_chunks.chunks.routeLink({
      screenName: screenName,
      routeUrl: routeUrl,
      changeCase: changeCase
    }))).replace("".concat(PAGE_CONSTANTS.APP_ROUTES), "".concat(PAGE_CONSTANTS.APP_ROUTES).concat(os.EOL).concat(_chunks.chunks.routeComponent({
      screenName: screenName,
      routeUrl: routeUrl,
      changeCase: changeCase
    }))));
  }

  return fs;
};

exports.generateScreen = generateScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZW5lcmF0ZUZzL2dlbmVyYXRlU2NyZWVuLnRzIl0sIm5hbWVzIjpbIlBBR0VfQ09OU1RBTlRTIiwiQVBQX1BBR0VTX0lNUE9SVFMiLCJBUFBfUk9VVEVTIiwiQVBQX1JPVVRFX0xJTktTIiwiZ2VuZXJhdGVTY3JlZW4iLCJjb25maWciLCJ0YWJsZXNMaXN0Iiwic2NyZWVuIiwicm9vdEZpbGUiLCJmcyIsInNjcmVlbk5hbWUiLCJ0YWJsZUlkIiwidGFibGVGaWVsZHMiLCJmb3JtRmllbGRzIiwiZ2VuZXJhdG9yRGF0YSIsInJvdXRlVXJsIiwiY2hhbmdlQ2FzZSIsImNhbWVsIiwiZW50aXR5TmFtZSIsInBsdXJhbGl6ZSIsInNpbmd1bGFyIiwiaW5jbHVkZUNvbHVtbnMiLCJyZXBsYWNlIiwib3MiLCJFT0wiLCJjaHVua3MiLCJyb3V0ZUltcG9ydCIsInJvdXRlTGluayIsInJvdXRlQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBY0EsSUFBTUEsY0FBYyxHQUFHO0FBQ3JCQyxFQUFBQSxpQkFBaUIsRUFBRSw4QkFERTtBQUVyQkMsRUFBQUEsVUFBVSxFQUFFLHlCQUZTO0FBR3JCQyxFQUFBQSxlQUFlLEVBQUU7QUFISSxDQUF2Qjs7QUFNTyxJQUFNQyxjQUFjLEdBQ3pCLFNBRFdBLGNBQ1gsT0FBMkRDLE1BQTNELEVBQStGO0FBQUEsTUFBNUZDLFVBQTRGLFFBQTVGQSxVQUE0RjtBQUFBLE1BQWhGQyxNQUFnRixRQUFoRkEsTUFBZ0Y7QUFBQSxNQUF4RUMsUUFBd0UsUUFBeEVBLFFBQXdFO0FBQzdGLE1BQU1DLEVBQTZCLEdBQUcsRUFBdEM7QUFENkYsTUFFckZDLFVBRnFGLEdBRXBDSCxNQUZvQyxDQUVyRkcsVUFGcUY7QUFBQSxNQUV6RUMsT0FGeUUsR0FFcENKLE1BRm9DLENBRXpFSSxPQUZ5RTtBQUFBLE1BRWhFQyxXQUZnRSxHQUVwQ0wsTUFGb0MsQ0FFaEVLLFdBRmdFO0FBQUEsTUFFbkRDLFVBRm1ELEdBRXBDTixNQUZvQyxDQUVuRE0sVUFGbUQ7QUFHN0YsTUFBTUMsYUFBYSxHQUFHO0FBQUVSLElBQUFBLFVBQVUsRUFBVkEsVUFBRjtBQUFjSyxJQUFBQSxPQUFPLEVBQVBBLE9BQWQ7QUFBdUJELElBQUFBLFVBQVUsRUFBVkE7QUFBdkIsR0FBdEI7QUFDQSxNQUFNSyxRQUFRLGNBQU9DLFVBQVUsQ0FBQ0MsS0FBWCxDQUFpQlAsVUFBakIsQ0FBUCxDQUFkO0FBRUEsTUFBTVEsVUFBVSxHQUFHQyxTQUFTLENBQUNDLFFBQVYsQ0FBbUJWLFVBQW5CLENBQW5CO0FBRUFELEVBQUFBLEVBQUUsc0JBQWUsNENBQW9CQyxVQUFwQixDQUFmLGNBQWtELDhDQUFzQlEsVUFBdEIsQ0FBbEQsRUFBRixHQUNFLG9DQUFtQkosYUFBbkIsb0JBQXVDVCxNQUF2QztBQUErQ2dCLElBQUFBLGNBQWMsRUFBRVI7QUFBL0QsS0FERjtBQUdBSixFQUFBQSxFQUFFLHNCQUFlLDRDQUFvQkMsVUFBcEIsQ0FBZixjQUFrRCw0Q0FBb0JRLFVBQXBCLENBQWxELEVBQUYsR0FDRSxnQ0FBaUJKLGFBQWpCLG9CQUFxQ1QsTUFBckM7QUFBNkNnQixJQUFBQSxjQUFjLEVBQUVSO0FBQTdELEtBREY7QUFHQUosRUFBQUEsRUFBRSxzQkFBZSw0Q0FBb0JDLFVBQXBCLENBQWYsY0FBa0QsOENBQXNCUSxVQUF0QixDQUFsRCxFQUFGLEdBQ0Usb0NBQW1CSixhQUFuQixDQURGO0FBR0FMLEVBQUFBLEVBQUUsc0JBQWUsNENBQW9CQyxVQUFwQixDQUFmLGNBQWtELHlDQUFpQkEsVUFBakIsQ0FBbEQsRUFBRixHQUNFLDBCQUFjSSxhQUFkLG9CQUFrQ1QsTUFBbEM7QUFBMENnQixJQUFBQSxjQUFjLEVBQUVUO0FBQTFELEtBREY7QUFHQUgsRUFBQUEsRUFBRSxzQkFBZSw0Q0FBb0JDLFVBQXBCLENBQWYsZUFBRixHQUNFLGtDQUFjSSxhQUFkLENBREY7O0FBR0EsTUFBSSxPQUFPTixRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDQyxJQUFBQSxFQUFFLENBQUMsYUFBRCxDQUFGLEdBQW9CLDRCQUNsQkQsUUFBUSxDQUNMYyxPQURILFdBRU90QixjQUFjLENBQUNDLGlCQUZ0QixhQUdPRCxjQUFjLENBQUNDLGlCQUh0QixTQUcwQ3NCLEVBQUUsQ0FBQ0MsR0FIN0MsU0FHbURDLGVBQU9DLFdBQVAsQ0FBbUI7QUFBRWhCLE1BQUFBLFVBQVUsRUFBVkEsVUFBRjtBQUFjTSxNQUFBQSxVQUFVLEVBQVZBO0FBQWQsS0FBbkIsQ0FIbkQsR0FLR00sT0FMSCxXQU1PdEIsY0FBYyxDQUFDRyxlQU50QixhQU9PSCxjQUFjLENBQUNHLGVBUHRCLFNBT3dDb0IsRUFBRSxDQUFDQyxHQVAzQyxTQU9pREMsZUFBT0UsU0FBUCxDQUFpQjtBQUFFakIsTUFBQUEsVUFBVSxFQUFWQSxVQUFGO0FBQWNLLE1BQUFBLFFBQVEsRUFBUkEsUUFBZDtBQUF3QkMsTUFBQUEsVUFBVSxFQUFWQTtBQUF4QixLQUFqQixDQVBqRCxHQVNHTSxPQVRILFdBVU90QixjQUFjLENBQUNFLFVBVnRCLGFBV09GLGNBQWMsQ0FBQ0UsVUFYdEIsU0FXbUNxQixFQUFFLENBQUNDLEdBWHRDLFNBVzRDQyxlQUFPRyxjQUFQLENBQXNCO0FBQUVsQixNQUFBQSxVQUFVLEVBQVZBLFVBQUY7QUFBY0ssTUFBQUEsUUFBUSxFQUFSQSxRQUFkO0FBQXdCQyxNQUFBQSxVQUFVLEVBQVZBO0FBQXhCLEtBQXRCLENBWDVDLEVBRGtCLENBQXBCO0FBZUQ7O0FBRUQsU0FBT1AsRUFBUDtBQUNELENBM0NJIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBUYWJsZVNjaGVtYSB9IGZyb20gJ0A4YmFzZS91dGlscyc7XG5pbXBvcnQgKiBhcyBjaGFuZ2VDYXNlIGZyb20gJ2NoYW5nZS1jYXNlJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBsdXJhbGl6ZSBmcm9tICdwbHVyYWxpemUnO1xuXG5pbXBvcnQgeyBmb3JtYXRDb2RlIH0gZnJvbSAnLi4vZm9ybWF0Q29kZSc7XG5pbXBvcnQgeyBjaHVua3MgfSBmcm9tICcuLi9nZW5lcmF0ZUZpbGVzL2NodW5rcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNyZWF0ZUZvcm0gfSBmcm9tICcuLi9nZW5lcmF0ZUZpbGVzL2dlbmVyYXRlQ3JlYXRlRm9ybS9jcmVhdGVGb3JtJztcbmltcG9ydCB7IGdlbmVyYXRlRGVsZXRlRm9ybSB9IGZyb20gJy4uL2dlbmVyYXRlRmlsZXMvZ2VuZXJhdGVEZWxldGVGb3JtL2RlbGV0ZUZvcm0nO1xuaW1wb3J0IHsgZ2VuZXJhdGVFZGl0Rm9ybSB9IGZyb20gJy4uL2dlbmVyYXRlRmlsZXMvZ2VuZXJhdGVFZGl0Rm9ybS9lZGl0Rm9ybSc7XG5pbXBvcnQgeyBnZW5lcmF0ZUluZGV4IH0gZnJvbSAnLi4vZ2VuZXJhdGVGaWxlcy9nZW5lcmF0ZUluZGV4JztcbmltcG9ydCB7IGdlbmVyYXRlVGFibGUgfSBmcm9tICcuLi9nZW5lcmF0ZUZpbGVzL2dlbmVyYXRlVGFibGUvdGFibGUnO1xuaW1wb3J0IHsgSUdlbmVyYXRvcnNDb21tb25Db25maWcsIElTY3JlZW5UYWJsZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIGdldENyZWF0ZUZvcm1GaWxlTmFtZSxcbiAgZ2V0RGVsZXRlRm9ybUZpbGVOYW1lLFxuICBnZXRFZGl0Rm9ybUZpbGVOYW1lLFxuICBnZXRTY3JlZW5Gb2xkZXJOYW1lLFxuICBnZXRUYWJsZUZpbGVOYW1lLFxufSBmcm9tICcuL2dlbmVyYXRlRmlsZU5hbWVzJztcblxuaW50ZXJmYWNlIElHZW5lcmF0ZVByb2plY3RGc0RhdGEge1xuICB0YWJsZXNMaXN0OiBUYWJsZVNjaGVtYVtdO1xuICBzY3JlZW46IElTY3JlZW5UYWJsZTtcbiAgcm9vdEZpbGU/OiBzdHJpbmc7XG59XG5cbmNvbnN0IFBBR0VfQ09OU1RBTlRTID0ge1xuICBBUFBfUEFHRVNfSU1QT1JUUzogJy8qKiBfX0FQUF9QQUdFU19JTVBPUlRTX18gKi8nLFxuICBBUFBfUk9VVEVTOiAney8qKiBfX0FQUF9ST1VURVNfXyAqL30nLFxuICBBUFBfUk9VVEVfTElOS1M6ICd7LyoqIF9fQVBQX1JPVVRFX0xJTktTX18gKi99Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNjcmVlbiA9XG4gICh7IHRhYmxlc0xpc3QsIHNjcmVlbiwgcm9vdEZpbGUgfTogSUdlbmVyYXRlUHJvamVjdEZzRGF0YSwgY29uZmlnOiBJR2VuZXJhdG9yc0NvbW1vbkNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGZzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgY29uc3QgeyBzY3JlZW5OYW1lLCB0YWJsZUlkLCB0YWJsZUZpZWxkcywgZm9ybUZpZWxkcyB9ID0gc2NyZWVuO1xuICAgIGNvbnN0IGdlbmVyYXRvckRhdGEgPSB7IHRhYmxlc0xpc3QsIHRhYmxlSWQsIHNjcmVlbk5hbWUgfTtcbiAgICBjb25zdCByb3V0ZVVybCA9IGAvJHtjaGFuZ2VDYXNlLmNhbWVsKHNjcmVlbk5hbWUpfWA7XG5cbiAgICBjb25zdCBlbnRpdHlOYW1lID0gcGx1cmFsaXplLnNpbmd1bGFyKHNjcmVlbk5hbWUpO1xuXG4gICAgZnNbYHNyYy9yb3V0ZXMvJHtnZXRTY3JlZW5Gb2xkZXJOYW1lKHNjcmVlbk5hbWUpfS8ke2dldENyZWF0ZUZvcm1GaWxlTmFtZShlbnRpdHlOYW1lKX1gXSA9XG4gICAgICBnZW5lcmF0ZUNyZWF0ZUZvcm0oZ2VuZXJhdG9yRGF0YSwgeyAuLi5jb25maWcsIGluY2x1ZGVDb2x1bW5zOiBmb3JtRmllbGRzIH0pO1xuXG4gICAgZnNbYHNyYy9yb3V0ZXMvJHtnZXRTY3JlZW5Gb2xkZXJOYW1lKHNjcmVlbk5hbWUpfS8ke2dldEVkaXRGb3JtRmlsZU5hbWUoZW50aXR5TmFtZSl9YF0gPVxuICAgICAgZ2VuZXJhdGVFZGl0Rm9ybShnZW5lcmF0b3JEYXRhLCB7IC4uLmNvbmZpZywgaW5jbHVkZUNvbHVtbnM6IGZvcm1GaWVsZHMgfSk7XG5cbiAgICBmc1tgc3JjL3JvdXRlcy8ke2dldFNjcmVlbkZvbGRlck5hbWUoc2NyZWVuTmFtZSl9LyR7Z2V0RGVsZXRlRm9ybUZpbGVOYW1lKGVudGl0eU5hbWUpfWBdID1cbiAgICAgIGdlbmVyYXRlRGVsZXRlRm9ybShnZW5lcmF0b3JEYXRhKTtcblxuICAgIGZzW2BzcmMvcm91dGVzLyR7Z2V0U2NyZWVuRm9sZGVyTmFtZShzY3JlZW5OYW1lKX0vJHtnZXRUYWJsZUZpbGVOYW1lKHNjcmVlbk5hbWUpfWBdID1cbiAgICAgIGdlbmVyYXRlVGFibGUoZ2VuZXJhdG9yRGF0YSwgeyAuLi5jb25maWcsIGluY2x1ZGVDb2x1bW5zOiB0YWJsZUZpZWxkcyB9KTtcblxuICAgIGZzW2BzcmMvcm91dGVzLyR7Z2V0U2NyZWVuRm9sZGVyTmFtZShzY3JlZW5OYW1lKX0vaW5kZXguanNgXSA9XG4gICAgICBnZW5lcmF0ZUluZGV4KGdlbmVyYXRvckRhdGEpO1xuXG4gICAgaWYgKHR5cGVvZiByb290RmlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZzWydzcmMvUm9vdC5qcyddID0gZm9ybWF0Q29kZShcbiAgICAgICAgcm9vdEZpbGVcbiAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgIGAke1BBR0VfQ09OU1RBTlRTLkFQUF9QQUdFU19JTVBPUlRTfWAsXG4gICAgICAgICAgICBgJHtQQUdFX0NPTlNUQU5UUy5BUFBfUEFHRVNfSU1QT1JUU30ke29zLkVPTH0ke2NodW5rcy5yb3V0ZUltcG9ydCh7IHNjcmVlbk5hbWUsIGNoYW5nZUNhc2UgfSl9YCxcbiAgICAgICAgICApXG4gICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICBgJHtQQUdFX0NPTlNUQU5UUy5BUFBfUk9VVEVfTElOS1N9YCxcbiAgICAgICAgICAgIGAke1BBR0VfQ09OU1RBTlRTLkFQUF9ST1VURV9MSU5LU30ke29zLkVPTH0ke2NodW5rcy5yb3V0ZUxpbmsoeyBzY3JlZW5OYW1lLCByb3V0ZVVybCwgY2hhbmdlQ2FzZSB9KX1gLFxuICAgICAgICAgIClcbiAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgIGAke1BBR0VfQ09OU1RBTlRTLkFQUF9ST1VURVN9YCxcbiAgICAgICAgICAgIGAke1BBR0VfQ09OU1RBTlRTLkFQUF9ST1VURVN9JHtvcy5FT0x9JHtjaHVua3Mucm91dGVDb21wb25lbnQoeyBzY3JlZW5OYW1lLCByb3V0ZVVybCwgY2hhbmdlQ2FzZSB9KX1gLFxuICAgICAgICAgICksXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBmcztcbiAgfTtcbiJdfQ==