"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const graphql_request_1 = require("graphql-request");
const error_codes_1 = __importDefault(require("@8base/error-codes"));
const importWorkspace_1 = require("./importWorkspace");
const RefreshTokenInvalidError_1 = require("./RefreshTokenInvalidError");
const USER_REFRESH_TOKEN_QUERY = graphql_tag_1.default `
  mutation UserRefreshToken($refreshToken: String!) {
    userRefreshToken(data: { refreshToken: $refreshToken }) {
      refreshToken
      idToken
    }
  }
`;
const hasIdTokenExpiredError = R.any(R.allPass([R.propEq('code', error_codes_1.default.TokenExpiredErrorCode), R.propEq('message', 'Token expired')]));
const getRefreshToken = R.path(['userRefreshToken', 'refreshToken']);
const getIdToken = R.path(['userRefreshToken', 'idToken']);
/**
 * Client provides methods to make requests to the API.
 * @param endpoint - The endpoint which are using for make requests.
 */
class Client {
    constructor(endpoint) {
        this.handleRequestErrors = (err) => {
            if (hasIdTokenExpiredError(R.pathOr([], ['response', 'errors'], err))) {
                return this.tryToRefreshToken(err);
            }
            throw err;
        };
        this.gqlc = new graphql_request_1.GraphQLClient(endpoint);
    }
    /**
     * Update id token.
     * @param idToken - The id token.
     */
    setIdToken(idToken) {
        this.idToken = idToken;
        if (idToken) {
            this.gqlc.setHeader('Authorization', `Bearer ${idToken}`);
        }
        else {
            // @ts-ignore. Check access to private variable.
            delete this.gqlc.options.headers.Authorization;
        }
    }
    /**
     * Update refresh token.
     * @param refreshToken - The refresh token.
     */
    setRefreshToken(refreshToken) {
        this.refreshToken = refreshToken;
    }
    /**
     * Update workspace identifier.
     * @param workspaceId - The workspace identifier.
     */
    setWorkspaceId(workspaceId) {
        this.workspaceId = workspaceId;
        this.gqlc.setHeader('workspace', workspaceId);
    }
    tryToRefreshToken(err) {
        return __awaiter(this, void 0, void 0, function* () {
            const { refreshToken } = this;
            this.setIdToken(null);
            let response = null;
            try {
                response = yield this.gqlc.request(USER_REFRESH_TOKEN_QUERY, {
                    refreshToken,
                });
            }
            catch (err) {
                throw new RefreshTokenInvalidError_1.RefreshTokenInvalidError();
            }
            const newRefreshToken = getRefreshToken(response);
            const newIdToken = getIdToken(response);
            this.setRefreshToken(newRefreshToken);
            this.setIdToken(newIdToken);
            return this.request(err.request.query, err.request.variables);
        });
    }
    /**
     * Send request to the API
     * @param query - GraphQL query.
     * @param variables - The variables that will be used when executing the query.
     * @returns {Promise}
     */
    request(query, variables = {}) {
        // @ts-ignore. Check how it works with query as DocumentNode
        return this.gqlc.request(query, variables).catch(this.handleRequestErrors);
    }
    importWorkspace(workspace) {
        return importWorkspace_1.importWorkspace(this.request.bind(this), workspace);
    }
}
exports.Client = Client;
//# sourceMappingURL=Client.js.map