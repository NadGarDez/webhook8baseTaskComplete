import { DocumentNode } from 'graphql';
import { GraphQLClient } from 'graphql-request';
declare type GraphQLClientResponse = {
    errors: object[];
    data: object;
};
declare type GraphQLClientRequest = {
    query: DocumentNode;
    variables: object;
};
declare type GraphQLClientError = {
    response: GraphQLClientResponse;
    request: GraphQLClientRequest;
};
/**
 * Client provides methods to make requests to the API.
 * @param endpoint - The endpoint which are using for make requests.
 */
declare class Client {
    gqlc: GraphQLClient;
    workspaceId?: string;
    idToken?: string | null;
    refreshToken?: string;
    constructor(endpoint: string);
    /**
     * Update id token.
     * @param idToken - The id token.
     */
    setIdToken(idToken: string | null): void;
    /**
     * Update refresh token.
     * @param refreshToken - The refresh token.
     */
    setRefreshToken(refreshToken: string): void;
    /**
     * Update workspace identifier.
     * @param workspaceId - The workspace identifier.
     */
    setWorkspaceId(workspaceId: string): void;
    tryToRefreshToken(err: GraphQLClientError): Promise<any>;
    handleRequestErrors: (err: GraphQLClientError) => Promise<any>;
    /**
     * Send request to the API
     * @param query - GraphQL query.
     * @param variables - The variables that will be used when executing the query.
     * @returns {Promise}
     */
    request(query: string | DocumentNode, variables?: object): any;
    importWorkspace(workspace: object): Promise<void>;
}
export { Client };
//# sourceMappingURL=Client.d.ts.map